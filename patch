 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/src/providers/registry.ts b/src/providers/registry.ts
index 25d55f009b5862f93634383c0efd0b411d7a90a4..39c97227d86e317f5e50cc561342380e917dac09 100644
--- a/src/providers/registry.ts
+++ b/src/providers/registry.ts
@@ -1,30 +1,29 @@
 import dedent from 'dedent';
 import path from 'path';
 import { importModule } from '../esm';
 import logger from '../logger';
-import { MEMORY_POISONING_PLUGIN_ID } from '../redteam/plugins/agentic/constants';
 import { MemoryPoisoningProvider } from '../redteam/providers/agentic/memoryPoisoning';
 import RedteamBestOfNProvider from '../redteam/providers/bestOfN';
 import RedteamCrescendoProvider from '../redteam/providers/crescendo';
 import RedteamGoatProvider from '../redteam/providers/goat';
 import RedteamIterativeProvider from '../redteam/providers/iterative';
 import RedteamImageIterativeProvider from '../redteam/providers/iterativeImage';
 import RedteamIterativeTreeProvider from '../redteam/providers/iterativeTree';
 import RedteamPandamoniumProvider from '../redteam/providers/pandamonium';
 import type { LoadApiProviderContext } from '../types';
 import type { ApiProvider, ProviderOptions } from '../types/providers';
 import { isJavascriptFile } from '../util/fileExtensions';
 import { AI21ChatCompletionProvider } from './ai21';
 import { AlibabaChatCompletionProvider, AlibabaEmbeddingProvider } from './alibaba';
 import { AnthropicCompletionProvider } from './anthropic/completion';
 import { AnthropicMessagesProvider } from './anthropic/messages';
 import { ANTHROPIC_MODELS } from './anthropic/util';
 import { AzureAssistantProvider } from './azure/assistant';
 import { AzureChatCompletionProvider } from './azure/chat';
 import { AzureCompletionProvider } from './azure/completion';
 import { AzureEmbeddingProvider } from './azure/embedding';
 import { AzureModerationProvider } from './azure/moderation';
 import { BAMProvider } from './bam';
 import { AwsBedrockCompletionProvider, AwsBedrockEmbeddingProvider } from './bedrock/index';
 import { BrowserProvider } from './browser';
 import { createCerebrasProvider } from './cerebras';
@@ -82,51 +81,51 @@ import { createScriptBasedProviderFactory } from './scriptBasedProvider';
 import { ScriptCompletionProvider } from './scriptCompletion';
 import { SequenceProvider } from './sequence';
 import { SimulatedUser } from './simulatedUser';
 import { createTogetherAiProvider } from './togetherai';
 import { VoyageEmbeddingProvider } from './voyage';
 import { WatsonXProvider } from './watsonx';
 import { WebhookProvider } from './webhook';
 import { WebSocketProvider } from './websocket';
 import { createXAIProvider } from './xai/chat';
 import { createXAIImageProvider } from './xai/image';
 
 interface ProviderFactory {
   test: (providerPath: string) => boolean;
   create: (
     providerPath: string,
     providerOptions: ProviderOptions,
     context: LoadApiProviderContext,
   ) => Promise<ApiProvider>;
 }
 
 export const providerMap: ProviderFactory[] = [
   createScriptBasedProviderFactory('exec', null, ScriptCompletionProvider),
   createScriptBasedProviderFactory('golang', 'go', GolangProvider),
   createScriptBasedProviderFactory('python', 'py', PythonProvider),
   {
-    test: (providerPath: string) => providerPath === MEMORY_POISONING_PLUGIN_ID,
+    test: (providerPath: string) => providerPath === 'agentic:memory-poisoning',
     create: async (
       providerPath: string,
       providerOptions: ProviderOptions,
       context: LoadApiProviderContext,
     ) => {
       return new MemoryPoisoningProvider(providerOptions);
     },
   },
   {
     test: (providerPath: string) => providerPath.startsWith('adaline:'),
     create: async (
       providerPath: string,
       providerOptions: ProviderOptions,
       context: LoadApiProviderContext,
     ) => {
       const splits = providerPath.split(':');
       if (splits.length < 4) {
         throw new Error(
           `Invalid adaline provider path: ${providerPath}. path format should be 'adaline:<provider_name>:<model_type>:<model_name>' eg. 'adaline:openai:chat:gpt-4o'`,
         );
       }
       const providerName = splits[1];
       const modelType = splits[2];
       const modelName = splits[3];
       const { AdalineGatewayChatProvider, AdalineGatewayEmbeddingProvider } = await import(
diff --git a/src/redteam/constants/frameworks.ts b/src/redteam/constants/frameworks.ts
index c7b1fbdc137d8d940cf5d1c922a802e59a40aa1b..9a14abe0230964f812d1aafa832258967c38692b 100644
--- a/src/redteam/constants/frameworks.ts
+++ b/src/redteam/constants/frameworks.ts
@@ -1,26 +1,25 @@
-import { MEMORY_POISONING_PLUGIN_ID } from '../plugins/agentic/constants';
 import type { Plugin } from './plugins';
 import { FOUNDATION_PLUGINS, PII_PLUGINS } from './plugins';
 import type { Strategy } from './strategies';
 
 export const FRAMEWORK_NAMES: Record<string, string> = {
   'mitre:atlas': 'MITRE ATLAS',
   'nist:ai:measure': 'NIST AI RMF',
   'owasp:api': 'OWASP API Top 10',
   'owasp:llm': 'OWASP LLM Top 10',
   'owasp:agentic': 'OWASP Agentic v1.0',
   'eu:ai-act': 'EU AI Act',
 };
 
 export const OWASP_LLM_TOP_10_NAMES = [
   'Prompt Injection',
   'Sensitive Information Disclosure',
   'Supply Chain',
   'Improper Output Handling',
   'Insecure Output Handling',
   'Excessive Agency',
   'System Prompt Leakage',
   'Vector and Embedding Weaknesses',
   'Misinformation',
   'Unbounded Consumption',
 ];
@@ -173,51 +172,51 @@ export const OWASP_API_TOP_10_MAPPING: Record<
     plugins: ['shell-injection', 'sql-injection'],
     strategies: [],
   },
   'owasp:api:08': {
     plugins: ['harmful:privacy', 'pii:api-db', 'pii:session'],
     strategies: [],
   },
   'owasp:api:09': {
     plugins: ['harmful:specialized-advice', 'overreliance'],
     strategies: [],
   },
   'owasp:api:10': {
     plugins: ['debug-access', 'harmful:privacy'],
     strategies: [],
   },
 };
 
 /**
  * OWASP Agentic AI - Threats and Mitigations v1.0 (February 2025)
  */
 export const OWASP_AGENTIC_REDTEAM_MAPPING: Record<
   string,
   { plugins: Plugin[]; strategies: Strategy[] }
 > = {
   'owasp:agentic:t01': {
-    plugins: [MEMORY_POISONING_PLUGIN_ID],
+    plugins: ['agentic:memory-poisoning'],
     strategies: [],
   },
 };
 
 /**
  * Maps each major phase of the OWASP GenAI Red Teaming Blueprint
  * to relevant Promptfoo plugins and strategies for automated testing.
  */
 export const OWASP_LLM_RED_TEAM_MAPPING: Record<
   string,
   { plugins: Plugin[]; strategies: Strategy[] }
 > = {
   /**
    * Phase 1: Model Evaluation
    * Focus: Alignment, robustness, bias, "socio-technological harms,"
    *        and data risk at the base model layer.
    */
   'owasp:llm:redteam:model': {
     plugins: [...FOUNDATION_PLUGINS],
     strategies: [
       'jailbreak',
       'jailbreak:tree',
       'jailbreak:composite',
       'crescendo',
       'goat',
diff --git a/src/redteam/constants/metadata.ts b/src/redteam/constants/metadata.ts
index bb241a2a592c92616394f425f546020e64992f5a..af41e293a5f7e713b1748e8e46be233aa7fca99c 100644
--- a/src/redteam/constants/metadata.ts
+++ b/src/redteam/constants/metadata.ts
@@ -1,31 +1,30 @@
-import { MEMORY_POISONING_PLUGIN_ID } from '../plugins/agentic/constants';
 import type { Plugin } from './plugins';
 import type { Strategy } from './strategies';
 
 export const subCategoryDescriptions: Record<Plugin | Strategy, string> = {
-  [MEMORY_POISONING_PLUGIN_ID]: 'Tests whether an agent is vulnerable to memory poisoning attacks',
+  ['agentic:memory-poisoning']: 'Tests whether an agent is vulnerable to memory poisoning attacks',
   aegis: "Tests content safety handling using NVIDIA's Aegis dataset",
   'ascii-smuggling': 'Tests vulnerability to Unicode tag-based instruction smuggling attacks',
   audio: 'Tests handling of audio content',
   base64: 'Tests handling of Base64-encoded malicious payloads',
   basic: 'Original plugin tests without any additional strategies or optimizations',
   beavertails: 'Tests handling of malicious prompts from the BeaverTails dataset',
   'best-of-n': 'Jailbreak technique published by Anthropic and Stanford',
   bfla: 'Tests for broken function-level authorization vulnerabilities (OWASP API 5)',
   'bias:age': 'Age-related bias detection',
   'bias:disability': 'Disability-related bias detection',
   'bias:gender': 'Gender-related bias detection',
   'bias:race': 'Race-related bias detection',
   bola: 'Tests for broken object-level authorization vulnerabilities (OWASP API 1)',
   cca: 'Tests for vulnerability to Context Compliance Attacks using fabricated conversation history',
   citation: 'Exploits academic authority bias to bypass content filters',
   competitors: 'Tests for unauthorized competitor mentions and endorsements',
   contracts: 'Tests for unauthorized contractual commitments and legal exposure',
   crescendo: 'Multi-turn attack strategy that gradually escalates malicious intent',
   'cross-session-leak': 'Tests for information leakage between user sessions',
   cyberseceval: "Tests prompt injection attacks from Meta's CyberSecEval dataset",
   'debug-access': 'Tests for exposed debugging interfaces and commands',
   default: 'Standard security testing plugins',
   'divergent-repetition':
     'Tests for training data leaks through repetitive pattern exploitation that causes model divergence',
   donotanswer: 'Tests for vulnerabilities to Do Not Answer attacks',
@@ -119,51 +118,51 @@ export const subCategoryDescriptions: Record<Plugin | Strategy, string> = {
   'prompt-injection': 'Tests for direct prompt injection vulnerabilities',
   'rag-document-exfiltration': 'Tests for RAG document exfiltration',
   'rag-poisoning': 'Tests for vulnerabilities to RAG retrieval poisoning attacks',
   rbac: 'Tests role-based access control implementation',
   'reasoning-dos':
     'Tests for vulnerabilities to computational resource exhaustion through excessive reasoning patterns',
   religion: 'Tests handling of religious content and bias',
   retry:
     'Automatically incorporates previously failed test cases to build a regression testing suite',
   rot13: 'Tests handling of ROT13-encoded malicious content',
   'shell-injection': 'Tests for command injection vulnerabilities',
   'sql-injection': 'Tests for SQL injection vulnerabilities',
   ssrf: 'Tests for server-side request forgery vulnerabilities',
   'system-prompt-override': 'Tests for system prompt override vulnerabilities',
   'tool-discovery': 'Tests for enumeration of available tools and function calls',
   unsafebench: 'Tests handling of unsafe image content from the UnsafeBench dataset',
   xstest: 'Tests for XSTest attacks',
   video: 'Tests handling of video content',
   'other-encodings':
     'Collection of alternative text transformation strategies (Morse code, Pig Latin, camelCase, and emoji variation selector smuggling) for testing evasion techniques',
   bias: 'Bias detection across protected characteristics',
 };
 
 // These names are displayed in risk cards and in the table
 export const displayNameOverrides: Record<Plugin | Strategy, string> = {
-  [MEMORY_POISONING_PLUGIN_ID]: 'Agentic Memory Poisoning',
+  ['agentic:memory-poisoning']: 'Agentic Memory Poisoning',
   aegis: 'Aegis Dataset',
   'ascii-smuggling': 'ASCII Smuggling',
   audio: 'Audio Content',
   base64: 'Base64 Payload Encoding',
   basic: 'Baseline Testing',
   beavertails: 'BeaverTails Dataset',
   'toxic-chat': 'ToxicChat Dataset',
   'best-of-n': 'Best-of-N',
   bfla: 'Function-Level Authorization Bypass',
   bola: 'Object-Level Authorization Bypass',
   camelcase: 'CamelCase Encoding',
   emoji: 'Emoji Smuggling',
   cca: 'Context Compliance Attack',
   citation: 'Authority Bias Exploitation',
   competitors: 'Competitors',
   contracts: 'Unauthorized Commitments',
   crescendo: 'Multi-Turn Crescendo',
   'cross-session-leak': 'Cross-Session Data Leakage',
   cyberseceval: 'CyberSecEval Dataset',
   'debug-access': 'Debug Interface Exposure',
   default: 'Standard Security Suite',
   'divergent-repetition': 'Divergent Repetition',
   donotanswer: 'Do Not Answer Dataset',
   'excessive-agency': 'Excessive Agency',
   foundation: 'Foundation Model Plugin Collection',
@@ -259,51 +258,51 @@ export const displayNameOverrides: Record<Plugin | Strategy, string> = {
   'tool-discovery': 'Tool Discovery',
   unsafebench: 'UnsafeBench Dataset',
   xstest: 'XSTest Dataset',
   video: 'Video Content',
 };
 
 export enum Severity {
   Critical = 'critical',
   High = 'high',
   Medium = 'medium',
   Low = 'low',
 }
 
 export const severityDisplayNames: Record<Severity, string> = {
   [Severity.Critical]: 'Critical',
   [Severity.High]: 'High',
   [Severity.Medium]: 'Medium',
   [Severity.Low]: 'Low',
 };
 
 /*
  * Default severity values for each plugin.
  * Use getRiskCategorySeverityMap() whenever possible to respect the user's severity settings.
  */
 export const riskCategorySeverityMap: Record<Plugin, Severity> = {
-  [MEMORY_POISONING_PLUGIN_ID]: Severity.High,
+  ['agentic:memory-poisoning']: Severity.High,
   aegis: Severity.Medium,
   'ascii-smuggling': Severity.Low,
   beavertails: Severity.Low,
   bfla: Severity.High,
   bola: Severity.High,
   cca: Severity.High,
   'financial:calculation-error': Severity.Low,
   'financial:compliance-violation': Severity.Medium,
   'financial:data-leakage': Severity.Medium,
   'financial:hallucination': Severity.Low,
   'financial:sycophancy': Severity.Low,
   competitors: Severity.Low,
   contracts: Severity.Medium,
   'cross-session-leak': Severity.Medium,
   cyberseceval: Severity.Medium,
   donotanswer: Severity.Medium,
   'debug-access': Severity.High,
   default: Severity.Low,
   mcp: Severity.High,
   'medical:anchoring-bias': Severity.High,
   'medical:hallucination': Severity.Critical,
   'medical:incorrect-knowledge': Severity.Critical,
   'medical:prioritization-error': Severity.High,
   'medical:sycophancy': Severity.Medium,
   'off-topic': Severity.Medium,
@@ -379,51 +378,51 @@ export const riskCategories: Record<string, Plugin[]> = {
     // System security
     'ascii-smuggling',
     'bfla',
     'bola',
     'debug-access',
     'hijacking',
     'indirect-prompt-injection',
     'rbac',
     'shell-injection',
     'sql-injection',
     'ssrf',
     'tool-discovery',
     'mcp',
 
     // Data protection
     'cross-session-leak',
     'divergent-repetition',
     'harmful:privacy',
     'pii:api-db',
     'pii:direct',
     'pii:session',
     'pii:social',
     'pii',
     'prompt-extraction',
 
-    MEMORY_POISONING_PLUGIN_ID,
+    'agentic:memory-poisoning',
   ],
 
   'Compliance & Legal': [
     'contracts',
     'financial:calculation-error',
     'financial:compliance-violation',
     'financial:data-leakage',
     'financial:hallucination',
     'financial:sycophancy',
     'harmful:chemical-biological-weapons',
     'harmful:copyright-violations',
     'harmful:cybercrime:malicious-code',
     'harmful:cybercrime',
     'harmful:illegal-activities',
     'harmful:illegal-drugs:meth',
     'harmful:illegal-drugs',
     'harmful:indiscriminate-weapons',
     'harmful:intellectual-property',
     'harmful:non-violent-crime',
     'harmful:sex-crime',
     'harmful:specialized-advice',
     'harmful:unsafe-practices',
     'harmful:violent-crime',
     'harmful:weapons:ied',
   ],
@@ -478,51 +477,51 @@ export const riskCategories: Record<string, Plugin[]> = {
 
 export const categoryDescriptions = {
   'Security & Access Control': 'Data protection, access control, and system security risks.',
   'Compliance & Legal': 'Regulatory compliance, legal, and policy violation risks.',
   'Trust & Safety': 'Harmful, inappropriate, or offensive content generation risks.',
   Brand: 'Output reliability, accuracy, and brand reputation risks.',
   Datasets: 'Pre-defined test cases from research datasets.',
 };
 
 export type TopLevelCategory = keyof typeof riskCategories;
 
 export const categoryMapReverse = Object.entries(riskCategories).reduce(
   (acc, [category, harms]) => {
     harms.forEach((harm) => {
       acc[harm] = category;
     });
     return acc;
   },
   {} as Record<string, string>,
 );
 
 export const categoryLabels = Object.keys(categoryMapReverse);
 
 // Map from plugin name to metric name or harm category
 export const categoryAliases: Record<Plugin, string> = {
-  [MEMORY_POISONING_PLUGIN_ID]: 'AgenticMemoryPoisoning',
+  ['agentic:memory-poisoning']: 'AgenticMemoryPoisoning',
   aegis: 'Aegis',
   'ascii-smuggling': 'AsciiSmuggling',
   beavertails: 'BeaverTails',
   bfla: 'BFLAEnforcement',
   bola: 'BOLAEnforcement',
   cca: 'CCAEnforcement',
   competitors: 'CompetitorEndorsement',
   contracts: 'ContractualCommitment',
   'cross-session-leak': 'CrossSessionLeak',
   cyberseceval: 'CyberSecEval',
   donotanswer: 'DoNotAnswer',
   'debug-access': 'DebugAccess',
   default: 'Default',
   mcp: 'MCP',
   'medical:anchoring-bias': 'MedicalAnchoringBias',
   'medical:hallucination': 'Medical Hallucination',
   'medical:incorrect-knowledge': 'MedicalIncorrectKnowledge',
   'medical:prioritization-error': 'MedicalPrioritizationError',
   'medical:sycophancy': 'MedicalSycophancy',
   'financial:calculation-error': 'FinancialCalculationError',
   'financial:compliance-violation': 'FinancialComplianceViolation',
   'financial:data-leakage': 'FinancialDataLeakage',
   'financial:hallucination': 'FinancialHallucination',
   'financial:sycophancy': 'FinancialSycophancy',
   'off-topic': 'OffTopic',
@@ -581,51 +580,51 @@ export const categoryAliases: Record<Plugin, string> = {
   policy: 'PolicyViolation',
   politics: 'PoliticalStatement',
   'prompt-extraction': 'PromptExtraction',
   'rag-document-exfiltration': 'RAG Document Exfiltration',
   'rag-poisoning': 'RAG Poisoning',
   rbac: 'RbacEnforcement',
   'reasoning-dos': 'Reasoning DoS',
   religion: 'Religion',
   'shell-injection': 'ShellInjection',
   'sql-injection': 'SqlInjection',
   ssrf: 'SSRFEnforcement',
   'system-prompt-override': 'System Prompt Override',
   unsafebench: 'UnsafeBench',
   xstest: 'XSTest',
 };
 
 export const categoryAliasesReverse = Object.entries(categoryAliases).reduce(
   (acc, [key, value]) => {
     acc[value] = key;
     return acc;
   },
   {} as Record<string, string>,
 );
 
 export const pluginDescriptions: Record<Plugin, string> = {
-  [MEMORY_POISONING_PLUGIN_ID]: 'Tests whether an agent is vulnerable to memory poisoning attacks',
+  ['agentic:memory-poisoning']: 'Tests whether an agent is vulnerable to memory poisoning attacks',
   aegis: "Tests content safety handling using NVIDIA's Aegis dataset",
   'ascii-smuggling': 'Tests for ASCII-based prompt smuggling vulnerabilities',
   beavertails: 'Tests handling of malicious prompts from the BeaverTails dataset',
   bfla: 'Evaluates function-level authorization controls to identify privilege escalation vulnerabilities (OWASP API Security Top 10 #5)',
   bola: 'Tests object-level authorization mechanisms to detect unauthorized data access vulnerabilities (OWASP API Security Top 10 #1)',
   cca: 'Tests for vulnerability to Context Compliance Attacks using fabricated conversation history',
   competitors:
     'Assesses system protection against unauthorized competitor endorsements and brand security risks',
   contracts: 'Evaluates safeguards against unauthorized contractual commitments and legal exposure',
   'cross-session-leak':
     'Tests for information leakage vulnerabilities between different user sessions',
   cyberseceval: "Tests prompt injection attacks from Meta's CyberSecEval dataset",
   donotanswer: 'Tests for vulnerabilities to Do Not Answer attacks',
   'debug-access':
     'Identifies exposed debugging interfaces and unauthorized command execution vectors',
   default: 'Executes comprehensive baseline security testing across multiple risk categories',
   'divergent-repetition':
     'Tests repetitive patterns that can cause the model to diverge from normal behavior and leak training data',
   'excessive-agency': 'Evaluates system boundary enforcement and unauthorized action prevention',
   'tool-discovery': 'Tests for enumeration of available tools and function calls',
   foundation: 'Tests a collection of plugins designed to run against foundation models',
   hallucination: 'Tests system resilience against false information generation and propagation',
   harmbench:
     'Tests for harmful content, illegal activities, misinformation using the HarmBench dataset from the Center for AI Safety (CAIS)',
   'toxic-chat': 'Tests handling of toxic user prompts from the ToxicChat dataset',
diff --git a/src/redteam/constants/plugins.ts b/src/redteam/constants/plugins.ts
index 2a3caa977117aa2f565efe9390f400822609466f..6c1f6075d49d303cd414bfc3619e6cf05711f788 100644
--- a/src/redteam/constants/plugins.ts
+++ b/src/redteam/constants/plugins.ts
@@ -1,27 +1,25 @@
-import { MEMORY_POISONING_PLUGIN_ID } from '../plugins/agentic/constants';
-
 export const DEFAULT_NUM_TESTS_PER_PLUGIN = 5;
 
 // Redteam configuration defaults
 export const REDTEAM_DEFAULTS = {
   MAX_CONCURRENCY: 4,
   NUM_TESTS: 10,
 } as const;
 
 export const REDTEAM_MODEL = 'openai:chat:gpt-4.1-2025-04-14';
 
 export const LLAMA_GUARD_REPLICATE_PROVIDER =
   'replicate:moderation:meta/llama-guard-3-8b:146d1220d447cdcc639bc17c5f6137416042abee6ae153a2615e6ef5749205c8';
 
 export const LLAMA_GUARD_ENABLED_CATEGORIES: string[] = [
   'S1', // Violent Crimes
   'S2', // Non-Violent Crimes
   'S3', // Sex Crimes
   'S4', // Child Exploitation
   'S5', // Defamation
   'S6', // Specialized Advice
   // S7: 'Privacy' - disabled due to false positives from allowed entities
   'S8', // Intellectual Property
   'S9', // Indiscriminate Weapons
   'S10', // Hate
   'S11', // Self-Harm
@@ -117,51 +115,51 @@ export const GUARDRAILS_EVALUATION_PLUGINS = [
   // Substances
   'harmful:illegal-activities',
   'harmful:illegal-drugs',
   'harmful:illegal-drugs:meth',
 
   // Information Integrity
   'harmful:misinformation-disinformation',
   'harmful:specialized-advice',
 
   // Legal & IP
   'harmful:copyright-violations',
   'harmful:intellectual-property',
 
   // === SYSTEM SECURITY & INTEGRITY ===
   'cyberseceval',
   'excessive-agency',
   'hallucination',
   'overreliance',
   'divergent-repetition',
   'reasoning-dos',
 
   // === PII & PRIVACY PROTECTION (UK/EU Compliance) ===
   'harmful:privacy',
 ] as const;
 
-export const AGENTIC_PLUGINS = [MEMORY_POISONING_PLUGIN_ID] as const;
+export const AGENTIC_PLUGINS = ['agentic:memory-poisoning'] as const;
 export type AgenticPlugin = (typeof AGENTIC_PLUGINS)[number];
 
 export const COLLECTIONS = [
   'default',
   'foundation',
   'harmful',
   'pii',
   'bias',
   'guardrails-eval',
 ] as const;
 export type Collection = (typeof COLLECTIONS)[number];
 
 export const UNALIGNED_PROVIDER_HARM_PLUGINS = {
   // MLCommons harm categories
   // https://www.llama.com/docs/model-cards-and-prompt-formats/llama-guard-3/
   'harmful:child-exploitation': 'Child Exploitation',
   'harmful:hate': 'Hate',
   'harmful:indiscriminate-weapons': 'Indiscriminate Weapons',
   'harmful:non-violent-crime': 'Non-Violent Crimes',
   'harmful:self-harm': 'Self-Harm',
   'harmful:sex-crime': 'Sex Crimes',
   'harmful:sexual-content': 'Sexual Content',
   'harmful:violent-crime': 'Violent Crimes',
 
   // Harmbench taxonomy
@@ -253,51 +251,51 @@ export const ADDITIONAL_PLUGINS = [
   'overreliance',
   'pliny',
   'prompt-extraction',
   'rag-document-exfiltration',
   'rag-poisoning',
   'rbac',
   'reasoning-dos',
   'religion',
   'shell-injection',
   'sql-injection',
   'ssrf',
   'system-prompt-override',
   'tool-discovery',
   'unsafebench',
   'xstest',
 ] as const;
 export type AdditionalPlugin = (typeof ADDITIONAL_PLUGINS)[number];
 
 // Plugins that require configuration and can't be enabled by default or included as additional.
 export const CONFIG_REQUIRED_PLUGINS = ['intent', 'policy'] as const;
 export type ConfigRequiredPlugin = (typeof CONFIG_REQUIRED_PLUGINS)[number];
 
 // Agentic plugins that don't use strategies (standalone agentic plugins)
 export const AGENTIC_EXEMPT_PLUGINS = [
   'system-prompt-override',
-  MEMORY_POISONING_PLUGIN_ID,
+  'agentic:memory-poisoning',
 ] as const;
 
 // Dataset plugins that don't use strategies (standalone dataset plugins)
 export const DATASET_EXEMPT_PLUGINS = ['pliny', 'unsafebench'] as const;
 
 // Plugins that don't use strategies (standalone plugins) - combination of agentic and dataset
 export const STRATEGY_EXEMPT_PLUGINS = [
   ...AGENTIC_EXEMPT_PLUGINS,
   ...DATASET_EXEMPT_PLUGINS,
 ] as const;
 
 export type AgenticExemptPlugin = (typeof AGENTIC_EXEMPT_PLUGINS)[number];
 export type DatasetExemptPlugin = (typeof DATASET_EXEMPT_PLUGINS)[number];
 export type StrategyExemptPlugin = (typeof STRATEGY_EXEMPT_PLUGINS)[number];
 
 export type Plugin =
   | AdditionalPlugin
   | BasePlugin
   | Collection
   | ConfigRequiredPlugin
   | HarmPlugin
   | PIIPlugin
   | BiasPlugin
   | AgenticPlugin;
 
diff --git a/src/redteam/plugins/agentic/constants.ts b/src/redteam/plugins/agentic/constants.ts
index 9b52338e80fc59086d159612a9bd124264aae279..191735f90d8497e7abad1c0b4862a2d8d8c20ac6 100644
--- a/src/redteam/plugins/agentic/constants.ts
+++ b/src/redteam/plugins/agentic/constants.ts
@@ -1,3 +1 @@
-export const MEMORY_POISONING_PLUGIN_ID = 'agentic:memory-poisoning';
-
-export const REDTEAM_MEMORY_POISONING_PLUGIN_ID = `promptfoo:redteam:${MEMORY_POISONING_PLUGIN_ID}`;
+export const REDTEAM_MEMORY_POISONING_PLUGIN_ID = 'promptfoo:redteam:agentic:memory-poisoning';
diff --git a/src/redteam/plugins/index.ts b/src/redteam/plugins/index.ts
index 7410e7b270e2772d8c0b85a79f56332bc1685b22..5e9235e48af2f8d01c5e8c81aa2c04724593a555 100644
--- a/src/redteam/plugins/index.ts
+++ b/src/redteam/plugins/index.ts
@@ -1,48 +1,47 @@
 import { fetchWithCache } from '../../cache';
 import { VERSION } from '../../constants';
 import { getEnvBool } from '../../envars';
 import { getUserEmail } from '../../globalConfig/accounts';
 import logger from '../../logger';
 import { REQUEST_TIMEOUT_MS } from '../../providers/shared';
 import type { ApiProvider, PluginActionParams, PluginConfig, TestCase } from '../../types';
 import invariant from '../../util/invariant';
 import type { HarmPlugin } from '../constants';
 import {
   BIAS_PLUGINS,
   PII_PLUGINS,
   REDTEAM_PROVIDER_HARM_PLUGINS,
   UNALIGNED_PROVIDER_HARM_PLUGINS,
 } from '../constants';
 import {
   getRemoteGenerationUrl,
   neverGenerateRemote,
   shouldGenerateRemote,
 } from '../remoteGeneration';
 import { getShortPluginId } from '../util';
 import { AegisPlugin } from './aegis';
-import { MEMORY_POISONING_PLUGIN_ID } from './agentic/constants';
 import { type RedteamPluginBase } from './base';
 import { BeavertailsPlugin } from './beavertails';
 import { ContractPlugin } from './contracts';
 import { CrossSessionLeakPlugin } from './crossSessionLeak';
 import { CyberSecEvalPlugin } from './cyberseceval';
 import { DebugAccessPlugin } from './debugAccess';
 import { DivergentRepetitionPlugin } from './divergentRepetition';
 import { DoNotAnswerPlugin } from './donotanswer';
 import { ExcessiveAgencyPlugin } from './excessiveAgency';
 import { HallucinationPlugin } from './hallucination';
 import { HarmbenchPlugin } from './harmbench';
 import { AlignedHarmfulPlugin } from './harmful/aligned';
 import { getHarmfulAssertions } from './harmful/common';
 import { getHarmfulTests } from './harmful/unaligned';
 import { ImitationPlugin } from './imitation';
 import { IntentPlugin } from './intent';
 import { OverreliancePlugin } from './overreliance';
 import { getPiiLeakTestsForCategory } from './pii';
 import { PlinyPlugin } from './pliny';
 import { PolicyPlugin } from './policy';
 import { PoliticsPlugin } from './politics';
 import { PromptExtractionPlugin } from './promptExtraction';
 import { RbacPlugin } from './rbac';
 import { ShellInjectionPlugin } from './shellInjection';
 import { SqlInjectionPlugin } from './sqlInjection';
@@ -273,51 +272,51 @@ function createRemotePlugin<T extends PluginConfig>(
     validate: validate as ((config: PluginConfig) => void) | undefined,
     action: async ({ purpose, injectVar, n, config }: PluginActionParams) => {
       if (neverGenerateRemote()) {
         throw new Error(`${key} plugin requires remote generation to be enabled`);
       }
       const testCases: TestCase[] = await fetchRemoteTestCases(key, purpose, injectVar, n, config);
       const testsWithMetadata = testCases.map((testCase) => ({
         ...testCase,
         metadata: {
           ...testCase.metadata,
           pluginId: getShortPluginId(key),
         },
       }));
 
       if (key.startsWith('harmful:') || key.startsWith('bias:')) {
         return testsWithMetadata.map((testCase) => ({
           ...testCase,
           assert: getHarmfulAssertions(key as HarmPlugin),
         }));
       }
       return testsWithMetadata;
     },
   };
 }
 const remotePlugins: PluginFactory[] = [
-  MEMORY_POISONING_PLUGIN_ID,
+  'agentic:memory-poisoning',
   'ascii-smuggling',
   'bfla',
   'bola',
   'cca',
   'competitors',
   'harmful:misinformation-disinformation',
   'harmful:specialized-advice',
   'hijacking',
   'mcp',
   'medical:anchoring-bias',
   'medical:hallucination',
   'medical:incorrect-knowledge',
   'medical:prioritization-error',
   'medical:sycophancy',
   'financial:calculation-error',
   'financial:compliance-violation',
   'financial:data-leakage',
   'financial:hallucination',
   'financial:sycophancy',
   'off-topic',
   'rag-document-exfiltration',
   'rag-poisoning',
   'reasoning-dos',
   'religion',
   'ssrf',
diff --git a/test/redteam/constants/frameworks.test.ts b/test/redteam/constants/frameworks.test.ts
index 0d6ba4aa3534f9dda5334320c0acf8f075b38915..7f6746613ddf500c86be3c8fcfa00ad8a8f1745e 100644
--- a/test/redteam/constants/frameworks.test.ts
+++ b/test/redteam/constants/frameworks.test.ts
@@ -1,41 +1,40 @@
 import {
   FRAMEWORK_NAMES,
   OWASP_LLM_TOP_10_NAMES,
   OWASP_API_TOP_10_NAMES,
   OWASP_AGENTIC_NAMES,
   OWASP_LLM_TOP_10_MAPPING,
   OWASP_API_TOP_10_MAPPING,
   OWASP_AGENTIC_REDTEAM_MAPPING,
   OWASP_LLM_RED_TEAM_MAPPING,
   NIST_AI_RMF_MAPPING,
   MITRE_ATLAS_MAPPING,
   EU_AI_ACT_MAPPING,
   ALIASED_PLUGINS,
   ALIASED_PLUGIN_MAPPINGS,
 } from '../../../src/redteam/constants/frameworks';
-import { MEMORY_POISONING_PLUGIN_ID } from '../../../src/redteam/plugins/agentic/constants';
 
 describe('Framework Constants', () => {
   describe('FRAMEWORK_NAMES', () => {
     it('should contain correct framework names', () => {
       expect(FRAMEWORK_NAMES['mitre:atlas']).toBe('MITRE ATLAS');
       expect(FRAMEWORK_NAMES['nist:ai:measure']).toBe('NIST AI RMF');
       expect(FRAMEWORK_NAMES['owasp:api']).toBe('OWASP API Top 10');
       expect(FRAMEWORK_NAMES['owasp:llm']).toBe('OWASP LLM Top 10');
       expect(FRAMEWORK_NAMES['owasp:agentic']).toBe('OWASP Agentic v1.0');
       expect(FRAMEWORK_NAMES['eu:ai-act']).toBe('EU AI Act');
     });
   });
 
   describe('OWASP_LLM_TOP_10_NAMES', () => {
     it('should contain 10 items', () => {
       expect(OWASP_LLM_TOP_10_NAMES).toHaveLength(10);
     });
 
     it('should contain expected names', () => {
       expect(OWASP_LLM_TOP_10_NAMES).toContain('Prompt Injection');
       expect(OWASP_LLM_TOP_10_NAMES).toContain('Sensitive Information Disclosure');
       expect(OWASP_LLM_TOP_10_NAMES).toContain('Unbounded Consumption');
     });
   });
 
@@ -52,51 +51,51 @@ describe('Framework Constants', () => {
   });
 
   describe('OWASP_AGENTIC_NAMES', () => {
     it('should contain expected names', () => {
       expect(OWASP_AGENTIC_NAMES).toContain('T1: Memory Poisoning');
     });
   });
 
   describe('OWASP_LLM_TOP_10_MAPPING', () => {
     it('should have correct mapping structure', () => {
       expect(OWASP_LLM_TOP_10_MAPPING['owasp:llm:01']).toBeDefined();
       expect(OWASP_LLM_TOP_10_MAPPING['owasp:llm:01'].plugins).toBeDefined();
       expect(OWASP_LLM_TOP_10_MAPPING['owasp:llm:01'].strategies).toBeDefined();
     });
 
     it('should contain expected plugins and strategies', () => {
       const mapping = OWASP_LLM_TOP_10_MAPPING['owasp:llm:01'];
       expect(mapping.plugins).toContain('ascii-smuggling');
       expect(mapping.strategies).toContain('jailbreak');
     });
   });
 
   describe('OWASP_AGENTIC_REDTEAM_MAPPING', () => {
     it('should have correct mapping for memory poisoning', () => {
       expect(OWASP_AGENTIC_REDTEAM_MAPPING['owasp:agentic:t01'].plugins).toContain(
-        MEMORY_POISONING_PLUGIN_ID,
+        'agentic:memory-poisoning',
       );
       expect(OWASP_AGENTIC_REDTEAM_MAPPING['owasp:agentic:t01'].strategies).toHaveLength(0);
     });
   });
 
   describe('OWASP_LLM_RED_TEAM_MAPPING', () => {
     it('should contain all phases', () => {
       expect(OWASP_LLM_RED_TEAM_MAPPING['owasp:llm:redteam:model']).toBeDefined();
       expect(OWASP_LLM_RED_TEAM_MAPPING['owasp:llm:redteam:implementation']).toBeDefined();
       expect(OWASP_LLM_RED_TEAM_MAPPING['owasp:llm:redteam:system']).toBeDefined();
       expect(OWASP_LLM_RED_TEAM_MAPPING['owasp:llm:redteam:runtime']).toBeDefined();
     });
 
     it('should have correct strategies for each phase', () => {
       expect(OWASP_LLM_RED_TEAM_MAPPING['owasp:llm:redteam:model'].strategies).toContain(
         'jailbreak',
       );
       expect(OWASP_LLM_RED_TEAM_MAPPING['owasp:llm:redteam:implementation'].strategies).toContain(
         'prompt-injection',
       );
       expect(OWASP_LLM_RED_TEAM_MAPPING['owasp:llm:redteam:system'].strategies).toContain(
         'multilingual',
       );
       expect(OWASP_LLM_RED_TEAM_MAPPING['owasp:llm:redteam:runtime'].strategies).toContain(
         'crescendo',
diff --git a/test/redteam/constants/metadata.test.ts b/test/redteam/constants/metadata.test.ts
index bd146b06579376381a0e2caad79330f46e8a17b4..d9dba6b23e803423746e019f5cd9caaef1ca09a8 100644
--- a/test/redteam/constants/metadata.test.ts
+++ b/test/redteam/constants/metadata.test.ts
@@ -1,67 +1,66 @@
 import {
   Severity,
   severityDisplayNames,
   riskCategorySeverityMap,
   riskCategories,
   categoryDescriptions,
   categoryMapReverse,
   categoryLabels,
   categoryAliases,
   categoryAliasesReverse,
   pluginDescriptions,
   strategyDescriptions,
   strategyDisplayNames,
   PLUGIN_PRESET_DESCRIPTIONS,
   DEFAULT_OUTPUT_PATH,
   displayNameOverrides,
   subCategoryDescriptions,
 } from '../../../src/redteam/constants/metadata';
 import type { Plugin } from '../../../src/redteam/constants/plugins';
 import type { Strategy } from '../../../src/redteam/constants/strategies';
-import { MEMORY_POISONING_PLUGIN_ID } from '../../../src/redteam/plugins/agentic/constants';
 
 describe('metadata constants', () => {
   describe('Severity enum and display names', () => {
     it('should have matching severity levels and display names', () => {
       expect(Object.keys(severityDisplayNames)).toEqual(Object.values(Severity));
       expect(severityDisplayNames[Severity.Critical]).toBe('Critical');
       expect(severityDisplayNames[Severity.High]).toBe('High');
       expect(severityDisplayNames[Severity.Medium]).toBe('Medium');
       expect(severityDisplayNames[Severity.Low]).toBe('Low');
     });
   });
 
   describe('Risk category severity map', () => {
     it('should have valid severity levels', () => {
       Object.values(riskCategorySeverityMap).forEach((severity) => {
         expect(Object.values(Severity)).toContain(severity);
       });
     });
 
     it('should include memory poisoning plugin with high severity', () => {
-      expect(riskCategorySeverityMap[MEMORY_POISONING_PLUGIN_ID]).toBe(Severity.High);
+      expect(riskCategorySeverityMap['agentic:memory-poisoning']).toBe(Severity.High);
     });
   });
 
   describe('Risk categories', () => {
     it('should have valid category descriptions', () => {
       Object.keys(riskCategories).forEach((category) => {
         // @ts-expect-error: categoryDescriptions is only indexed by TopLevelCategory (not string)
         expect(categoryDescriptions[category]).toBeDefined();
         // @ts-expect-error: categoryDescriptions is only indexed by TopLevelCategory (not string)
         expect(typeof categoryDescriptions[category]).toBe('string');
       });
     });
 
     it('should have valid category mapping for each plugin', () => {
       Object.entries(categoryMapReverse).forEach(([plugin, category]) => {
         const foundInCategory = Object.entries(riskCategories).some(
           ([cat, plugins]) => cat === category && plugins.includes(plugin as Plugin),
         );
         expect(foundInCategory).toBe(true);
       });
     });
 
     it('should have matching category labels', () => {
       expect(categoryLabels).toEqual(Object.keys(categoryMapReverse));
     });
@@ -100,42 +99,42 @@ describe('metadata constants', () => {
         expect(typeof strategyDescriptions[strategy as Strategy]).toBe('string');
         expect(strategyDescriptions[strategy as Strategy].length).toBeGreaterThan(0);
       });
     });
 
     it('should have display names for all strategies', () => {
       Object.keys(strategyDisplayNames).forEach((strategy) => {
         expect(typeof strategyDisplayNames[strategy as Strategy]).toBe('string');
         expect(strategyDisplayNames[strategy as Strategy].length).toBeGreaterThan(0);
       });
     });
   });
 
   describe('Plugin preset descriptions', () => {
     it('should have valid preset descriptions', () => {
       Object.entries(PLUGIN_PRESET_DESCRIPTIONS).forEach(([preset, description]) => {
         expect(typeof preset).toBe('string');
         expect(typeof description).toBe('string');
         expect(description.length).toBeGreaterThan(0);
       });
     });
   });
 
   describe('Display name overrides', () => {
     it('should have display names for memory poisoning plugin', () => {
-      expect(displayNameOverrides[MEMORY_POISONING_PLUGIN_ID]).toBe('Agentic Memory Poisoning');
+      expect(displayNameOverrides['agentic:memory-poisoning']).toBe('Agentic Memory Poisoning');
     });
 
     it('should have matching subcategory descriptions', () => {
       Object.keys(displayNameOverrides).forEach((key) => {
         const keyAsPluginOrStrategy = key as Plugin | Strategy;
         expect(subCategoryDescriptions[keyAsPluginOrStrategy]).toBeDefined();
       });
     });
   });
 
   describe('Default output path', () => {
     it('should be defined correctly', () => {
       expect(DEFAULT_OUTPUT_PATH).toBe('redteam.yaml');
     });
   });
 });
diff --git a/test/redteam/constants/plugins.test.ts b/test/redteam/constants/plugins.test.ts
index 61b478cc1ac0a504502fb49009ace6e9f9d52423..f93e6929b6c996be7bad1a9bdc485a1561b1d36d 100644
--- a/test/redteam/constants/plugins.test.ts
+++ b/test/redteam/constants/plugins.test.ts
@@ -1,93 +1,92 @@
 import {
   ADDITIONAL_PLUGINS,
   AGENTIC_EXEMPT_PLUGINS,
   AGENTIC_PLUGINS,
   ALL_PLUGINS,
   BASE_PLUGINS,
   COLLECTIONS,
   CONFIG_REQUIRED_PLUGINS,
   DATASET_EXEMPT_PLUGINS,
   DEFAULT_NUM_TESTS_PER_PLUGIN,
   DEFAULT_PLUGINS,
   FOUNDATION_PLUGINS,
   GUARDRAILS_EVALUATION_PLUGINS,
   HARM_PLUGINS,
   LLAMA_GUARD_ENABLED_CATEGORIES,
   LLAMA_GUARD_REPLICATE_PROVIDER,
   PII_PLUGINS,
   REDTEAM_MODEL,
   REDTEAM_PROVIDER_HARM_PLUGINS,
   STRATEGY_EXEMPT_PLUGINS,
   UNALIGNED_PROVIDER_HARM_PLUGINS,
 } from '../../../src/redteam/constants/plugins';
-import { MEMORY_POISONING_PLUGIN_ID } from '../../../src/redteam/plugins/agentic/constants';
 
 describe('plugins constants', () => {
   it('should define DEFAULT_NUM_TESTS_PER_PLUGIN', () => {
     expect(DEFAULT_NUM_TESTS_PER_PLUGIN).toBe(5);
   });
 
   it('should define REDTEAM_MODEL', () => {
     expect(REDTEAM_MODEL).toBe('openai:chat:gpt-4.1-2025-04-14');
   });
 
   it('should define LLAMA_GUARD_REPLICATE_PROVIDER', () => {
     expect(LLAMA_GUARD_REPLICATE_PROVIDER).toBe(
       'replicate:moderation:meta/llama-guard-3-8b:146d1220d447cdcc639bc17c5f6137416042abee6ae153a2615e6ef5749205c8',
     );
   });
 
   it('should define LLAMA_GUARD_ENABLED_CATEGORIES', () => {
     expect(LLAMA_GUARD_ENABLED_CATEGORIES).toEqual([
       'S1',
       'S2',
       'S3',
       'S4',
       'S5',
       'S6',
       'S8',
       'S9',
       'S10',
       'S11',
       'S12',
       'S13',
     ]);
   });
 
   it('should define FOUNDATION_PLUGINS array', () => {
     expect(Array.isArray(FOUNDATION_PLUGINS)).toBe(true);
     expect(FOUNDATION_PLUGINS.length).toBeGreaterThan(0);
   });
 
   it('should define GUARDRAILS_EVALUATION_PLUGINS array', () => {
     expect(Array.isArray(GUARDRAILS_EVALUATION_PLUGINS)).toBe(true);
     expect(GUARDRAILS_EVALUATION_PLUGINS.length).toBeGreaterThan(0);
   });
 
   it('should define AGENTIC_PLUGINS with memory poisoning plugin', () => {
-    expect(AGENTIC_PLUGINS).toEqual([MEMORY_POISONING_PLUGIN_ID]);
+    expect(AGENTIC_PLUGINS).toEqual(['agentic:memory-poisoning']);
   });
 
   it('should define COLLECTIONS array', () => {
     expect(COLLECTIONS).toEqual([
       'default',
       'foundation',
       'harmful',
       'pii',
       'bias',
       'guardrails-eval',
     ]);
   });
 
   it('should define UNALIGNED_PROVIDER_HARM_PLUGINS object', () => {
     expect(typeof UNALIGNED_PROVIDER_HARM_PLUGINS).toBe('object');
     expect(Object.keys(UNALIGNED_PROVIDER_HARM_PLUGINS).length).toBeGreaterThan(0);
   });
 
   it('should define REDTEAM_PROVIDER_HARM_PLUGINS object', () => {
     expect(REDTEAM_PROVIDER_HARM_PLUGINS).toEqual({
       'harmful:intellectual-property': 'Intellectual Property violation',
       'harmful:privacy': 'Privacy violations',
     });
   });
 
@@ -98,51 +97,51 @@ describe('plugins constants', () => {
 
   it('should define PII_PLUGINS array', () => {
     expect(PII_PLUGINS).toEqual(['pii:api-db', 'pii:direct', 'pii:session', 'pii:social']);
   });
 
   it('should define BASE_PLUGINS array', () => {
     expect(BASE_PLUGINS).toEqual([
       'contracts',
       'excessive-agency',
       'hallucination',
       'hijacking',
       'politics',
     ]);
   });
 
   it('should define ADDITIONAL_PLUGINS array', () => {
     expect(Array.isArray(ADDITIONAL_PLUGINS)).toBe(true);
     expect(ADDITIONAL_PLUGINS.length).toBeGreaterThan(0);
   });
 
   it('should define CONFIG_REQUIRED_PLUGINS array', () => {
     expect(CONFIG_REQUIRED_PLUGINS).toEqual(['intent', 'policy']);
   });
 
   it('should define AGENTIC_EXEMPT_PLUGINS array', () => {
-    expect(AGENTIC_EXEMPT_PLUGINS).toEqual(['system-prompt-override', MEMORY_POISONING_PLUGIN_ID]);
+    expect(AGENTIC_EXEMPT_PLUGINS).toEqual(['system-prompt-override', 'agentic:memory-poisoning']);
   });
 
   it('should define DATASET_EXEMPT_PLUGINS array', () => {
     expect(DATASET_EXEMPT_PLUGINS).toEqual(['pliny', 'unsafebench']);
   });
 
   it('should define STRATEGY_EXEMPT_PLUGINS array', () => {
     expect(STRATEGY_EXEMPT_PLUGINS).toEqual([...AGENTIC_EXEMPT_PLUGINS, ...DATASET_EXEMPT_PLUGINS]);
   });
 
   it('should define DEFAULT_PLUGINS set', () => {
     expect(DEFAULT_PLUGINS instanceof Set).toBe(true);
     expect(DEFAULT_PLUGINS.size).toBeGreaterThan(0);
   });
 
   it('should define ALL_PLUGINS array', () => {
     expect(Array.isArray(ALL_PLUGINS)).toBe(true);
     expect(ALL_PLUGINS.length).toBeGreaterThan(0);
   });
 
   it('should have ALL_PLUGINS as sorted array', () => {
     const sorted = [...ALL_PLUGINS].sort();
     expect(ALL_PLUGINS).toEqual(sorted);
   });
 
 
EOF
)