import { jest } from '@jest/globals';
import { readFileSync } from 'fs';
import { join } from 'path';

describe('generated-constants.ts', () => {
  const EXPECTED_CONTENT = `// This file is a placeholder for development.
// During build, it gets overwritten with the actual PostHog key.
// DO NOT edit this file manually - changes will be lost during build.

export const POSTHOG_KEY = process.env.PROMPTFOO_POSTHOG_KEY || '';
`;

  it('should remain unchanged from the placeholder version', () => {
    const filePath = join(process.cwd(), 'src', 'generated-constants.ts');
    const actualContent = readFileSync(filePath, 'utf-8');
    
    expect(actualContent).toBe(EXPECTED_CONTENT);
  });

  it('should contain the exact placeholder comment', () => {
    const filePath = join(process.cwd(), 'src', 'generated-constants.ts');
    const actualContent = readFileSync(filePath, 'utf-8');
    
    expect(actualContent).toContain('// This file is a placeholder for development.');
    expect(actualContent).toContain('// During build, it gets overwritten with the actual PostHog key.');
    expect(actualContent).toContain('// DO NOT edit this file manually - changes will be lost during build.');
  });

  it('should export POSTHOG_KEY with the correct fallback', () => {
    const filePath = join(process.cwd(), 'src', 'generated-constants.ts');
    const actualContent = readFileSync(filePath, 'utf-8');
    
    expect(actualContent).toContain("export const POSTHOG_KEY = process.env.PROMPTFOO_POSTHOG_KEY || '';");
  });

  it('should have exactly 6 lines including the trailing newline', () => {
    const filePath = join(process.cwd(), 'src', 'generated-constants.ts');
    const actualContent = readFileSync(filePath, 'utf-8');
    const lines = actualContent.split('\n');
    
    // 5 lines of content + 1 empty line at the end
    expect(lines.length).toBe(6);
    expect(lines[5]).toBe(''); // Last line should be empty
  });

  it('should not contain any additional exports or code', () => {
    const filePath = join(process.cwd(), 'src', 'generated-constants.ts');
    const actualContent = readFileSync(filePath, 'utf-8');
    
    // Count the number of export statements
    const exportMatches = actualContent.match(/export\s+/g);
    expect(exportMatches).toHaveLength(1);
    
    // Ensure no other common code patterns exist
    expect(actualContent).not.toContain('import');
    expect(actualContent).not.toContain('function');
    expect(actualContent).not.toContain('class');
    expect(actualContent).not.toContain('interface');
    expect(actualContent).not.toContain('type');
  });
}); 