# Comprehensive audit configuration that tests all aspects
# Combines functionality, performance, edge cases, and resource management

providers:
  # Primary comparison: persistent vs traditional
  - id: 'file:///Users/mdangelo/projects/pf3/test-scripts/basic_test.py:call_api'
    label: persistent-full-test
    config:
      persistent: true

  - id: 'file:///Users/mdangelo/projects/pf3/test-scripts/basic_test.py:call_api'
    label: traditional-full-test
    config:
      persistent: false

  # Heavy workload comparison
  - id: 'file:///Users/mdangelo/projects/pf3/test-scripts/heavy_import_test.py:call_api'
    label: persistent-heavy
    config:
      persistent: true

  - id: 'file:///Users/mdangelo/projects/pf3/test-scripts/heavy_import_test.py:call_api'
    label: traditional-heavy
    config:
      persistent: false

  # Stateful workload (only persistent should maintain state)
  - id: 'file:///Users/mdangelo/projects/pf3/test-scripts/stateful_test.py:call_api'
    label: persistent-stateful
    config:
      persistent: true

  - id: 'file:///Users/mdangelo/projects/pf3/test-scripts/stateful_test.py:call_api'
    label: traditional-stateful
    config:
      persistent: false

prompts:
  # Basic functionality tests
  - 'What is 2 + 2?'
  - 'Generate a random number between 1 and 100'
  - 'Calculate fibonacci(10)'

  # Performance-sensitive tests
  - 'Load ML model and predict: [1, 2, 3, 4, 5]'
  - 'Process large dataset with 100 entries'

  # State persistence tests
  - 'Initialize complex state'
  - 'Run expensive computation with cache key: test_key_1'
  - 'Run expensive computation with cache key: test_key_1' # Should hit cache in persistent mode
  - 'Get state summary'

  # Edge cases
  - 'process_unicode: 擔먼봏疸뒪뎳 游깴 칠mojis 침치침칩'
  - "handle_special_chars: \n\t\r\\\"'"

tests:
  # Correctness tests - both should produce same results for deterministic operations
  - vars:
      prompt: 'What is 2 + 2?'
    assert:
      - type: contains
        value: '4'
      - type: not-contains
        value: 'error'
      - type: latency
        threshold: 5000

  # Performance tests - persistent should be faster on repeated calls
  - vars:
      prompt: 'Load ML model and predict: [1, 2, 3, 4, 5]'
    options:
      repeat: 3 # Run 3 times to see performance improvement
    assert:
      - type: not-contains
        value: 'error'
      - type: latency
        threshold: 30000 # First call may be slow

  # State persistence test - only persistent should maintain state
  - vars:
      prompt: 'Initialize complex state'
    assert:
      - type: not-contains
        value: 'error'
      - type: latency
        threshold: 10000

  # Cache test sequence
  - vars:
      prompt: 'Run expensive computation with cache key: audit_test'
    assert:
      - type: not-contains
        value: 'error'
      - type: latency
        threshold: 15000

  - vars:
      prompt: 'Run expensive computation with cache key: audit_test' # Should be cached in persistent
    assert:
      - type: not-contains
        value: 'error'
      - type: latency
        threshold: 5000 # Should be much faster if cached

  # Unicode handling
  - vars:
      prompt: 'process_unicode: 擔먼봏疸뒪뎳 游깴 칠mojis 침치침칩'
    assert:
      - type: contains
        value: 'unicode'
      - type: not-contains
        value: 'error'

  # Resource management test
  - vars:
      prompt: 'Get state summary'
    assert:
      - type: not-contains
        value: 'error'
      - type: latency
        threshold: 5000

defaultTest:
  options:
    maxConcurrency: 2 # Test with some concurrency
  assert:
    - type: not-contains
      value: 'fatal'
    - type: latency
      threshold: 30000

# Environment setup
env:
  PYTHONPATH: './test-scripts'
  PROMPTFOO_DISABLE_TELEMETRY: '1'
