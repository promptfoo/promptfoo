import React, { useState } from 'react';
import PluginTable from './PluginTable';

const VulnerabilityDropdown = () => {
  const [openSections, setOpenSections] = useState<Set<string>>(new Set(['security']));

  const toggleSection = (section: string) => {
    setOpenSections((prev) => {
      const newSections = new Set(prev);
      if (newSections.has(section)) {
        newSections.delete(section);
      } else {
        newSections.add(section);
      }
      return newSections;
    });
  };

  const renderSection = (
    title: string,
    id: string,
    description: string,
    vulnerabilityType: string,
  ) => (
    <div key={id}>
      <h3 id={id} onClick={() => toggleSection(id)} style={{ cursor: 'pointer' }}>
        <a href={`#${id}`} style={{ textDecoration: 'none', color: 'inherit' }}>
          {title} {openSections.has(id) ? '▼' : '▶'}
        </a>
      </h3>
      <p>{description}</p>
      {openSections.has(id) && (
        <PluginTable
          vulnerabilityType={vulnerabilityType}
          shouldRenderCategory={false}
          shouldGroupByCategory={false}
        />
      )}
    </div>
  );

  const sections = [
    {
      title: 'Technical Vulnerabilities',
      id: 'technical-vulnerabilities',
      description:
        'Technical security risks including SQL injection, shell injection, and other vulnerabilities.',
      vulnerabilityType: 'security',
    },
    {
      title: 'Privacy and Security',
      id: 'privacy-and-security',
      description: 'Risks related to personal data exposure and privacy breaches.',
      vulnerabilityType: 'privacy',
    },
    {
      title: 'Criminal Activities',
      id: 'criminal',
      description: 'Content related to illegal activities and criminal behavior.',
      vulnerabilityType: 'criminal',
    },
    {
      title: 'Harmful Content',
      id: 'harmful',
      description: 'Content that could cause harm or distress to users.',
      vulnerabilityType: 'harmful',
    },
    {
      title: 'Misinformation and Misuse',
      id: 'misinformation-and-misuse',
      description: 'False information, hallucinations, and model misuse.',
      vulnerabilityType: 'misinformation and misuse',
    },
  ];

  return (
    <div>
      {sections.map((section) =>
        renderSection(section.title, section.id, section.description, section.vulnerabilityType),
      )}
    </div>
  );
};

export default VulnerabilityDropdown;
