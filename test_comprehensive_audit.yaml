description: 'Comprehensive audit test matching reviewer feedback'

providers:
  # Test 1: Stateful Persistence & Performance
  - id: 'file://test_stateful_provider.py'
    label: 'Stateful Provider (Persistent)'
    config:
      basePath: '.'
      persistent: true

  # Test 2: Function Signature Flexibility  
  - id: 'file://test_signature_provider.py:call_simple'
    label: 'Simple Signature'
    config:
      basePath: '.'
      persistent: true
      
  - id: 'file://test_signature_provider.py:call_with_options'
    label: 'Options Signature'
    config:
      basePath: '.'
      persistent: true
      
  - id: 'file://test_signature_provider.py:call_full'
    label: 'Full Signature'
    config:
      basePath: '.'
      persistent: true
      
  - id: 'file://test_signature_provider.py:call_with_state'
    label: 'State Signature'
    config:
      basePath: '.'
      persistent: true
      
  - id: 'file://test_signature_provider.py:call_kwargs'
    label: 'Kwargs Signature'
    config:
      basePath: '.'
      persistent: true

  # Test 3: Async vs Sync Concurrency
  - id: 'file://test_async_provider.py:call_async'
    label: 'Async Provider'
    config:
      basePath: '.'
      persistent: true
      
  - id: 'file://test_async_provider.py:call_sync'
    label: 'Sync Provider (Blocking)'
    config:
      basePath: '.'
      persistent: true

  # Test 4: Runtime Error Handling
  - id: 'file://test_error_provider.py'
    label: 'Error Provider'
    config:
      basePath: '.'
      persistent: true

prompts:
  # Test 1: Multiple calls to test state persistence and performance
  - 'First call'
  - 'Second call'
  - 'First call'  # Should be cached
  
  # Test 2: Signature flexibility
  - 'Test simple'
  - 'Test options'
  - 'Test full'
  - 'Test state'
  - 'Test kwargs'
  
  # Test 3: Concurrency (4 calls each to test concurrent vs sequential)
  - 'Async call 1'
  - 'Async call 2' 
  - 'Async call 3'
  - 'Async call 4'
  - 'Sync call 1'
  - 'Sync call 2'
  - 'Sync call 3'
  - 'Sync call 4'
  
  # Test 4: Error handling
  - 'fine'
  - 'error'
  - 'fine'  # Should work after error

tests:
  - description: 'Comprehensive audit test'
    vars: {}
    assert:
      - type: javascript
        value: 'output && (output.output || output.error)'