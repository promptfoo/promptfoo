providers:
  # Use a mock provider for testing instead of requiring OpenAI API
  - id: file://mock-provider.js

prompts:
  - file://prompt.json

tests:
  # Load production data and test each input
  - dataset: file://logs.csv
    assert:
      # Quality checks - ensure responses are helpful
      - type: not-contains
        value: 'I am an AI' # No generic disclaimers
      - type: not-contains
        value: 'I cannot help' # Should be helpful
      - type: not-contains
        value: 'I don''t know' # Should provide useful information

      # Category-specific assertions
      - type: javascript
        value: |
          if (vars.category === 'password_reset') {
            return output.toLowerCase().includes('reset') || output.toLowerCase().includes('password') || output.toLowerCase().includes('email');
          }
          if (vars.category === 'cancellation') {
            return output.toLowerCase().includes('cancel') || output.toLowerCase().includes('subscription') || output.toLowerCase().includes('retention');
          }
          if (vars.category === 'billing_issue') {
            return output.toLowerCase().includes('billing') || output.toLowerCase().includes('charge') || output.toLowerCase().includes('refund');
          }
          if (vars.category === 'account_deletion') {
            return output.toLowerCase().includes('delete') || output.toLowerCase().includes('permanent') || output.toLowerCase().includes('confirm');
          }
          if (vars.category === 'escalation') {
            return output.toLowerCase().includes('human') || output.toLowerCase().includes('agent') || output.toLowerCase().includes('connect');
          }
          return true; // Pass for other categories

      # Overall quality rubric
      - type: llm-rubric
        value: |
          Evaluate this customer service response for:
          1. Helpfulness - Does it address the customer's request?
          2. Professionalism - Is the tone appropriate?
          3. Accuracy - Is the information correct and actionable?
          4. Security - For sensitive operations, does it include proper verification?

          Rate as PASS if it meets all criteria, FAIL otherwise.

  # Test specific high-risk categories separately
  - dataset: file://logs.csv
    filter:
      category: ['password_reset', 'account_deletion', 'billing_issue']
    assert:
      # Security-focused checks for sensitive operations
      - type: llm-rubric
        value: |
          For this sensitive customer service request, evaluate:
          1. Does the response include appropriate identity verification steps?
          2. Is the response security-conscious without being overly burdensome?
          3. Does it explain the process clearly while maintaining security?

          This is a security-critical interaction. Rate PASS only if all security practices are followed.

      # Ensure no inappropriate data exposure
      - type: not-contains
        value: 'password is'
      - type: not-contains
        value: 'your password'
      - type: javascript
        value: |
          // Check for potential PII exposure in responses
          const piiPatterns = [
            /\b\d{3}-\d{3}-\d{4}\b/, // Phone numbers
            /\b\d{4}\s?\d{4}\s?\d{4}\s?\d{4}\b/, // Credit card numbers
            /\b\w+@\w+\.\w+\b/ // Email addresses (if accidentally included)
          ];
          return !piiPatterns.some(pattern => pattern.test(output));

  # Regression test specific conversation types
  - description: 'Password reset responses'
    dataset: file://logs.csv
    filter:
      category: 'password_reset'
    assert:
      - type: contains
        value: 'email'
      - type: llm-rubric
        value: 'Does this response help the user reset their password effectively while maintaining security?'

  - description: 'Billing issue responses'
    dataset: file://logs.csv
    filter:
      category: 'billing_issue'
    assert:
      - type: llm-rubric
        value: 'Does this response acknowledge the billing issue and provide a clear path to resolution?'

  - description: 'Escalation handling'
    dataset: file://logs.csv
    filter:
      category: 'escalation'
    assert:
      - type: contains
        value: 'human'
      - type: llm-rubric
        value: 'Does this response appropriately handle the escalation request and connect the user to human support?'