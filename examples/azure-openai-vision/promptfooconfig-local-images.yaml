# yaml-language-server: $schema=https://promptfoo.dev/config-schema.json
description: Azure OpenAI vision with local images example

prompts:
  - file://prompt.json

providers:
  - id: azure:chat:gpt-4o-deployment
    label: Azure GPT-4o
    config:
      apiHost: 'your-resource-name.openai.azure.com'
      apiKey: ${AZURE_OPENAI_API_KEY}
      apiVersion: '2024-10-21'

tests:
  # Example: Loading a local image file
  - vars:
      question: 'What do you see in this image?'
      # The image_url will be populated by transformVars
      image_url: 'data:image/jpeg;base64,{{base64_image}}'
    options:
      transformVars: |
        const fs = require('fs');
        const path = require('path');
        
        // Load your local image file here
        const imagePath = path.join(__dirname, 'sample-image.jpg');
        
        // Check if file exists
        if (!fs.existsSync(imagePath)) {
          console.error(`Image not found: ${imagePath}`);
          // Return a minimal test image if file doesn't exist
          return {
            ...vars,
            base64_image: 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=='
          };
        }
        
        // Read and encode the image
        const imageBuffer = fs.readFileSync(imagePath);
        const base64_image = imageBuffer.toString('base64');
        
        console.log(`Loaded image: ${imagePath} (${(imageBuffer.length / 1024).toFixed(2)} KB)`);
        
        return { ...vars, base64_image };
    assert:
      - type: is-json
        value:
          required: ["description"]
      - type: javascript
        value: |
          // Custom assertion to check if response is meaningful
          const words = output.split(' ').length;
          return words > 10; // Expect at least 10 words in the description

  # Example: Loading multiple local images for comparison
  - vars:
      question: 'Compare these two images and describe the differences'
      # This example shows how to handle multiple images
    options:
      transformVars: |
        const fs = require('fs');
        const path = require('path');
        
        // Helper function to load and encode image
        function loadImage(filename) {
          const imagePath = path.join(__dirname, filename);
          if (fs.existsSync(imagePath)) {
            return fs.readFileSync(imagePath).toString('base64');
          }
          // Return a small test image if file doesn't exist
          return 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
        }
        
        // For multiple images, you would need to modify the prompt format
        // This is just an example of how to load multiple images
        const image1 = loadImage('image1.jpg');
        const image2 = loadImage('image2.jpg');
        
        // For this example, we'll just use the first image
        // In practice, you'd need a different prompt format for multiple images
        return {
          ...vars,
          image_url: `data:image/jpeg;base64,${image1}`
        };

# You can also use a custom provider function to handle complex image loading
# See the promptfoo documentation for custom provider examples 