# Configuration using traditional file-based certificates (for comparison)
# This shows the traditional approach using file paths

description: 'HTTP Provider with File-Based PFX Certificate (Traditional Approach)'

providers:
  - id: http
    config:
      url: https://localhost:3456/chat
      method: POST
      headers:
        Content-Type: application/json
        User-Agent: promptfoo-file-cert-test
      body:
        prompt: '{{prompt}}'
        user: test-user
      signatureAuth:
        type: pfx
        # Traditional file-based approach
        pfxPath: ./certificate.pfx
        pfxPassword: testpassword
        signatureAlgorithm: SHA256
        signatureValidityMs: 300000
        signatureDataTemplate: 'promptfoo-db-test{{signatureTimestamp}}'

prompts:
  - 'Hello from the traditional file-based test!'
  - 'How does file-based auth compare to database storage?'
  - 'What are the deployment considerations?'
  - 'Show me this works the same way!'

tests:
  - description: 'Should return hello world message (same as database approach)'
    assert:
      - type: contains
        value: 'Hello World'

  - description: 'Should authenticate successfully (same as database approach)'
    assert:
      - type: contains
        value: 'authenticated'

  - description: 'Should be a valid JSON response'
    assert:
      - type: is-json

  - description: 'Should process the request identically to database approach'
    assert:
      - type: javascript
        value: |
          const response = JSON.parse(output);
          // The server response should be identical regardless of cert source
          return response.message && response.metadata && response.metadata.authenticated;

defaultTest:
  assert:
    - type: latency
      threshold: 5000
