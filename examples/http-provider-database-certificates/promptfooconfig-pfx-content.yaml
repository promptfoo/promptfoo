# Configuration using base64-encoded PFX certificate content (database-style)
# This demonstrates how certificates would be stored and used from a database

description: 'HTTP Provider with PFX Certificate Content (Database-Style)'

providers:
  - id: http
    config:
      url: https://localhost:3456/chat
      method: POST
      headers:
        Content-Type: application/json
        User-Agent: promptfoo-database-cert-test
        signature: '{{signature}}'
        timestamp: '{{signatureTimestamp}}'
        client-id: 'promptfoo-database-test'
      body:
        prompt: '{{prompt}}'
        user: test-user
      signatureAuth:
        type: pfx
        # This base64 content simulates what would be stored in a database
        pfxContent: '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'
        pfxPassword: testpassword
        signatureAlgorithm: SHA256
        signatureValidityMs: 300000
        signatureDataTemplate: 'promptfoo-db-test{{signatureTimestamp}}'

prompts:
  - 'Hello, can you introduce yourself?'
  - 'What is the capital of France?'
  - 'Tell me a fun fact about space!'
  - 'How does certificate authentication work?'

tests:
  - description: 'Should return hello world message'
    assert:
      - type: contains
        value: 'Hello World'
      - type: contains
        value: 'database-stored certificates'

  - description: 'Should include authentication metadata'
    assert:
      - type: contains
        value: 'authenticated'
      - type: contains
        value: 'database'

  - description: 'Should be a valid JSON response'
    assert:
      - type: is-json

  - description: 'Response should include the prompt'
    assert:
      - type: javascript
        value: |
          const response = JSON.parse(output);
          return response.metadata && response.metadata.prompt === vars.prompt;

defaultTest:
  assert:
    - type: latency
      threshold: 5000 # Should respond within 5 seconds
