# Configuration using separate base64-encoded certificate and key content (database-style)
# This demonstrates an alternative database storage approach using separate cert/key

description: 'HTTP Provider with Separate Certificate and Key Content (Database-Style)'

providers:
  - id: http
    config:
      url: https://localhost:3456/chat
      method: POST
      headers:
        Content-Type: application/json
        User-Agent: promptfoo-database-cert-key-test
        signature: '{{signature}}'
        timestamp: '{{signatureTimestamp}}'
        client-id: 'promptfoo-database-test'
      body:
        prompt: '{{prompt}}'
        user: test-user
      signatureAuth:
        type: pfx
        # These base64 contents simulate separate database columns for cert and key
        certContent: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURiVENDQWxXZ0F3SUJBZ0lVUWlnbDhNbkczTU43clZKVUJJVzFvMzIyWDBZd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1JqRWJNQmtHQTFVRUF3d1NSR0YwWVdKaGMyVWdRMlZ5ZENCVVpYTjBNUm93R0FZRFZRUUtEQkZRY205dApjSFJtYjI4Z1JYaGhiWEJzWlRFTE1Ba0dBMVVFQmhNQ1ZWTXdIaGNOTWpVd09ESTRNVGN4TkRVeVdoY05Nall3Ck9ESTRNVGN4TkRVeVdqQkdNUnN3R1FZRFZRUUREQkpFWVhSaFltRnpaU0JEWlhKMElGUmxjM1F4R2pBWUJnTlYKQkFvTUVWQnliMjF3ZEdadmJ5QkZlR0Z0Y0d4bE1Rc3dDUVlEVlFRR0V3SlZVekNDQVNJd0RRWUpLb1pJaHZjTgpBUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS1BsekEwREE3VVZ2MlZqUjZReXluQkY1Umx2dW5uY1lWVjB2NTFaCk1lK0Y5NDMwMW1LTENrazVvNVQxU1U1SmRGWjFNRkU1YkdIdFEwWDgxUERxamRKd0hQZEVOS1A5N0tWcWt5UTAKMzJVWCt1aTU2SzZhV0RtUUJKZ3BmK1R3c0s4R1Y5MFppenZjdWRZY2dxaUkwRUFvbVVSRUcxSTV4VU5KdUttUwpGNDF2aXZHQ0xFY2VjcGhpZDR4M3VXMVFtWWpvSUV6Znk3WTRFeFBCSUNLVHQ5ajY4bU5NbFFDbGRSNnN2Z0hSCnVyekI0d2Z2NVVRenhraXNKN0JRK3g4c1Nmd1BWckFQeFd2Z0FxcmN4Z1FMWFd0OUw5MXltcGtwS1crT0RXcFIKZHdQTUlmL2kzL2RwOUJpWXl1NWs3MGp2ZnZMQnRETXl1b1BCRUVxbkNuYlY3Z2NDQXdFQUFhTlRNRkV3SFFZRApWUjBPQkJZRUZBRTJnSE5MR1h4bjIydmF4Y0lKWmVFTDJpVDFNQjhHQTFVZEl3UVlNQmFBRkFFMmdITkxHWHhuCjIydmF4Y0lKWmVFTDJpVDFNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUIKQUtGQzNnc2hFVWdINnlTTEIyaDF6VjFRWW9ES0RBMk5mZXRNOTk3YWlqRmhOcVE0a21Wa05icDZtMEhHZ1pQawozc0FHdERka2tXTFdVVlZRZFUyNHgybUdtMkdEVmFnZ2RYcmY5K3FndlU0RDF6bHIrTjZDSElTWUN0WnI3TUZ4CmVEa1ZnaG54VTBaNGxnamNENVNTVXVnYWhIUHhGb3Y5YWd0a3pJbDFNUjJDaFgvRHB4dUQramxoaGRBN3g1THgKaE9ScDRzMVNEbGl2ajd6Mis4Wlg0Y1BSdHdrVjFPeUptMVpCZWRzZ2RuUG11ZmpsQmJWTURBT201eXY4VkZqQQpHUzRBZmxkN2UyZ3JTY0FSQVJod0haUWc0YjV2TEt4QTVHeEpqbzFzVnVIVmp6aC9PQ3M1TzFFK2VnMUs5NzN6CmJiSVVRSkF5d21oRDNwRS8ya1Vmby9JPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=='
        keyContent: 'LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ2o1Y3dOQXdPMUZiOWwKWTBla01zcHdSZVVaYjdwNTNHRlZkTCtkV1RIdmhmZU45TlppaXdwSk9hT1U5VWxPU1hSV2RUQlJPV3hoN1VORgovTlR3Nm8zU2NCejNSRFNqL2V5bGFwTWtOTjlsRi9yb3VlaXVtbGc1a0FTWUtYL2s4TEN2QmxmZEdZczczTG5XCkhJS29pTkJBS0psRVJCdFNPY1ZEU2JpcGtoZU5iNHJ4Z2l4SEhuS1lZbmVNZDdsdFVKbUk2Q0JNMzh1Mk9CTVQKd1NBaWs3ZlkrdkpqVEpVQXBYVWVyTDRCMGJxOHdlTUg3K1ZFTThaSXJDZXdVUHNmTEVuOEQxYXdEOFZyNEFLcQozTVlFQzExcmZTL2RjcHFaS1NsdmpnMXFVWGNEekNILzR0LzNhZlFZbU1ydVpPOUk3Mzd5d2JRek1ycUR3UkJLCnB3cDIxZTRIQWdNQkFBRUNnZ0VBRlJlVHBQRUlYeHVIWUJMZ3UxN1Y4cERzSk5QZUdhU2syZ3lHUkVlZ1I0VGsKRU42N1lEOG9lYmZ6TjA1QnV0TjFKMU01ZnBwM09qc0FkMWRNU0J6SFY1ZWFBckJDWGdCbG5md1RKNHV1WENJego1aE5Xd0hHWWZQL3R0MjlQeURTNWFDeld6ZHRsc2JSOExmUEpWTXNXa2NzbnZrTk5pTTFxZDNoYlRXZEJwSy9MClZrZjZSS2RIY1p0eDJ3bFBoS29XaHA2RTNIcjNGWlVoeXVBSWkyZ1dsQ2tENDlVWWpSbEZVWkdINUE5TnpPTE0KNnpNYXJYMHpIOFgrdVJidE9OZjdoeHZOSWVuRDZTTzA0aFJCU2IwMUdRZUJOK1oyMWV5YW9oUWluREZ4WmF4dQpOa0hoWkhyM3VjQXhBNGZlckQvQkpBcWJ6V1JYVjU0WDNFVzViR3NqSVFLQmdRRFhSd0pxZWVqNmQ5OG10UG5WCmVxbnV2WWQ5enZVT1lLUm5jbktuMThxSENlQnp4UzEyMkVuVkozSmlRVjlxS3J4RFA1MmtxWXlyeXFCbjM2U00KZ202VkRNM0VoUzRrRVlxNkl2YndFLzhJY01JVk9OTlZJVXY1Nk01THJrUk1DZWMwOUpWanlzYjhxWGVkZG1hLwpHZVJ2elc0WGV0UW56M0tMa2JGb0lWSlUvd0tCZ1FEQzVxNGV5UGtmdGhFMEhPZWY1WDFadXNYWk9BeUJkZnpWClZkcDZJVjFnUmlsZHYrZTkzdmdOb3grYWFkZXkrRnJzUmR5cTBxREZlVGRTVS80aVFCRHNvVlJDNUsxZUFIQXMKK2YzbERjZUdvVm8xYnNqMFdqSUpZY0ZmL0tSSGVYRzFTMmYydXV3TkZhYUc1ZWZuRnQ1MVVrSFVjdXFwYU8wWgpuL1lCOFZTKytRS0JnUURWQ3pBSDRYZkFEOHNtQ2luSXE2anFYR1J2QzlZV2tXdUIrSkFoTEh3QVliVGZ2VDIrCkJGUWsvdkhDN1FFWkZ3dlMzVzBNSE1MYTdCOE1UUllSKzY2bUVOSzk3akw0Zk9lMlI0M3JqMDV2c3U5UGd6b1oKWUdkSS9helMxclkrTGZyQ3ZGM3ZNU2oxdUZ4bzExamRQQ21HdjExNUhSUkNCWmxOS0RUU1lVK1NUd0tCZ0NIYgpveG56L2RzMWJNMnB5ODhxTmRsMXFkTXZlblN2QTRvb0RQazBmSjB4OHhPM045SHpQeEpYYVRFUS9BaTZQa2xYClpadERWZXlZUHpVTkpGUGMzMVBNUHZBVCs4NGRzMThNMnIrRTRrbVFGRFMrRnlqajFsZHM1UVFBeHFVb0FzbmsKM0oydklUeXdxeW82SEV3MzI5Tnp3NzNkYk1pYlVyMGwzYjIrcCtNNUFvR0FWOS9LUXhRdmQwQXl4c21DRmJpRgpOanptNEtIeW1vaU0wOXB4RUc0WG5RUzhTTjUvdEFYUEZKc3hOOWYvdEJsMXJPNlpvOGVLMCtZeExoWWpCYWFhCnRmeGVockpwei8wUkhnVHdwNUxaQkhOUEZBeEo0bkZIcXR2eVNrbVdlalNpcFJoRElwR3JRYXlYM1NJZjd6ZXMKQTVGN2hJMm1WT3Vsa2p0cTVvelMxWjg9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K'
        signatureAlgorithm: SHA256
        signatureValidityMs: 300000
        signatureDataTemplate: 'promptfoo-db-test{{signatureTimestamp}}'

prompts:
  - 'Hello from the cert/key content test!'
  - "What's different about this configuration?"
  - 'How are certificates managed in the database?'
  - 'Show me the authentication details!'

tests:
  - description: 'Should return hello world message'
    assert:
      - type: contains
        value: 'Hello World'

  - description: 'Should include certificate source metadata'
    assert:
      - type: contains
        value: 'database'

  - description: 'Should be a valid JSON response'
    assert:
      - type: is-json

  - description: 'Authentication should be successful'
    assert:
      - type: javascript
        value: |
          const response = JSON.parse(output);
          return response.metadata && response.metadata.authenticated === true;

defaultTest:
  assert:
    - type: latency
      threshold: 5000
