# yaml-language-server: $schema=https://promptfoo.dev/config-schema.json
description: HTTP provider streaming with TTFT measurement

# This example demonstrates streaming response handling with Time to First Token (TTFT) measurement.
# While promptfoo waits for complete responses, streaming enables important performance metrics:
#
# âœ… TTFT Measurement: Track how quickly models start responding
# âœ… User-Perceived Performance: Measure streaming responsiveness
# âœ… Model Comparison: Compare streaming performance across providers
#
# ðŸ’¡ Alternative: Use built-in providers when available (openai:chat:gpt-4o-mini)
# However, HTTP provider with streaming is valuable for:
# - Custom endpoints that support streaming
# - TTFT performance measurement
# - APIs not yet supported by built-in providers

prompts:
  - 'Write a haiku about {{topic}}'
  - 'Explain {{topic}} in one sentence'

providers:
  - id: https://api.openai.com/v1/chat/completions
    config:
      enableStreamingMetrics: true # Enable TTFT measurement
      method: 'POST'
      headers:
        'Content-Type': 'application/json'
        'Authorization': 'Bearer {{env.OPENAI_API_KEY}}'
      body:
        model: 'gpt-5-mini'
        messages:
          - role: 'user'
            content: '{{prompt}}'
        stream: true # Enable streaming for TTFT measurement
      transformResponse: |
        (json, text) => {
          // Handle non-streaming JSON response
          if (json && json.choices?.[0]?.message?.content) {
            return json.choices[0].message.content;
          }

          // Parse OpenAI streaming SSE format
          let content = '';
          for (const line of String(text || '').split('\n')) {
            const trimmed = line.trim();
            if (!trimmed.startsWith('data: ')) continue;
            if (trimmed === 'data: [DONE]') break;

            try {
              const data = JSON.parse(trimmed.slice(6));
              if (data.choices?.[0]?.delta?.content) {
                content += data.choices[0].delta.content;
              }
            } catch {
              // Skip malformed JSON
            }
          }
          return content.trim();
        }

defaultTest:
  assert:
    # Ensure we get meaningful content
    - type: javascript
      value: 'output && output.length > 10'

    # TTFT should be reasonable (under 3 seconds for demo)
    - type: ttft
      threshold: 3000

    # Total latency should be reasonable
    - type: latency
      threshold: 10000

tests:
  - vars:
      topic: 'mountains'
  - vars:
      topic: 'artificial intelligence'
  - vars:
      topic: 'ocean waves'
