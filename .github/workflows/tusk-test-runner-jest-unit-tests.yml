name: Tusk Test Runner - Jest unit tests (test directory)

# Required for Tusk
permissions:
  contents: read
on:
  workflow_dispatch:
    inputs:
      runId:
        description: 'Tusk Run ID'
        required: true
      tuskUrl:
        description: 'Tusk server URL'
        required: true
      commitSha:
        description: 'Commit SHA to checkout'
        required: true
      runnerIndexes:
        description: 'Runner indexes'
        required: false
        default: '["1"]'

jobs:
  test-action:
    name: Tusk Test Runner
    runs-on: ubuntu-latest

    env:
      PROMPTFOO_DISABLE_TELEMETRY: 1

    # Required for test parallelization where available, do not remove.
    strategy:
      matrix:
        runnerIndex: ${{ fromJson(github.event.inputs.runnerIndexes) }}

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.commitSha }} # Required for Tusk to access files for the commit being tested

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci

      - name: Start runner
        id: test-action
        uses: Use-Tusk/test-runner@v1
        # See https://github.com/Use-Tusk/test-runner for full details and examples.
        with:
          # Required for the test runner, do not remove this input
          runId: ${{ github.event.inputs.runId }}

          # Required for the test runner, do not remove this input
          tuskUrl: ${{ github.event.inputs.tuskUrl }}

          # Required for the test runner, do not remove this input
          commitSha: ${{ github.event.inputs.commitSha }}

          # Your Tusk auth token. It is recommended to add it to your repo's secrets.
          # Please adapt the secret name accordingly if you have named it differently.
          authToken: ${{ secrets.TUSK_AUTH_TOKEN }}

          # Set appDir to test directory where Jest tests are located
          appDir: 'test'

          # Jest test framework for src/ tests (excluding src/app which uses Vitest)
          testFramework: 'jest'

          # Test file regex to match Jest test files in test/ directory
          # This matches the 300+ Jest tests like test/providers/openai.test.ts, test/assertions/geval.test.ts, etc.
          testFileRegex: '^test/.*\.test\.(ts|tsx)$'

          # Lint script for test files - need to adjust path since we're in test/ directory
          lintScript: |
            set -e
            FILE_PATH="{{file}}"
            # Go back to root directory to run Biome with correct paths
            cd ..
            npx @biomejs/biome check --write "test/$FILE_PATH"
            cd test

          # The script to run Jest tests for individual files
          testScript: 'npx jest {{file}} --silent'

          # Coverage script for Jest tests
          coverageScript: 'npx jest {{testFilePaths}} --coverage --coverageDirectory=coverage --coverageReporters=json-summary --coverageReporters=json --silent'

          # No concurrency limit needed since we removed TypeScript compilation
          # maxConcurrency: 1

          # Required for test parallelization where available, do not remove.
          runnerIndex: ${{ matrix.runnerIndex }}
