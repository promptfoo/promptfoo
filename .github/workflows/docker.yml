# This GitHub Action builds the Docker image Promptfoo,
# runs the Docker container, performs a health check to ensure the application
# is running correctly, and then publishes the image to GitHub Container Registry
# if all checks pass. This action is triggered on release creation, workflow dispatch,
# pull requests to main that modify the Dockerfile, and pushes to main.

name: Test and Publish Multi-arch Docker Image
run-name: |
  ${{ github.event_name == 'release' && 'Release' ||
      github.event_name == 'workflow_dispatch' && 'Manual' ||
      github.event_name == 'pull_request' && 'PR' ||
      'Push' }}
  Docker build for ${{ github.ref_name }}
  ${{ github.event_name == 'pull_request' && format('(PR #{0})', github.event.number) || '' }}
  by @${{ github.actor }}

on:
  release:
    types: [created]
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - 'Dockerfile'
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          df -h

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing
        uses: docker/build-push-action@v6
        with:
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-linux-amd64
          context: .
          push: false
          load: true
          tags: local-test-image:latest
          platforms: linux/amd64
          build-args: |
            BUILD_VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ github.event_name == 'pull_request' && github.event.pull_request.updated_at || github.event.head_commit.timestamp || github.event.repository.updated_at }}
            GIT_SHA=${{ github.sha }}

      - name: Run Docker container for testing
        run: docker run -d --name promptfoo-container -p 3000:3000 local-test-image:latest

      - name: Verify Python and promptfoo
        run: |
          echo "Checking Python version:"
          if ! docker exec promptfoo-container python --version; then
            echo "Python check failed"
            exit 1
          fi

          echo "Checking promptfoo version:"
          if ! docker exec promptfoo-container promptfoo --version; then
            echo "promptfoo check failed"
            exit 1
          fi

      - name: Run health check
        run: |
          # Loop to check if the server is up
          for ((retry=1; retry<=10; retry++)); do
            if curl -f http://localhost:3000/health; then
              echo -e "\nHealth check passed"
              HEALTH_CHECK_PASS=true
              break
            else
              echo "Health check failed, retrying in 2 seconds..."
              sleep 2
            fi
          done

          # If health check did not pass after retries, exit with an error
          if [ -z "$HEALTH_CHECK_PASS" ]; then
            echo -e "\nHealth check failed after multiple attempts" >&2
            exit 1
          fi

      - name: run promptfoo eval
        id: eval
        env:
          PROMPTFOO_REMOTE_API_BASE_URL: http://localhost:3000
          PROMPTFOO_SHARING_APP_BASE_URL: http://localhost:3000
        run: |
          npm install
          npm run local -- eval -c .github/assets/promptfooconfig.yaml --share

      - name: Test that the eval results are uploaded
        run: |
          response=$(curl -s http://localhost:3000/api/results)
          echo "Response: $response"

          # Use jq to extract the array length
          count=$(echo "$response" | jq '.data | length')
          echo "Array Length: $count"

          # Check if the count is exactly 1
          if [ "$count" -ne 1 ]; then
            echo "Error: Expected 1 entry, but got $count"
            exit 1
          fi

      - name: Clean up Docker images
        if: always()
        run: |
          docker system prune -af
          docker volume prune -f
          df -h

      - name: Stop and remove Docker container
        if: always()
        run: |
          docker stop promptfoo-container
          docker rm promptfoo-container

  build-docker-and-push-digests:
    if: (github.event_name != 'pull_request')
    strategy:
      matrix:
        platforms:
          [
            { runner: ubuntu-latest, platform: linux/amd64, digest-suffix: linux-amd64 },
            { runner: ubuntu-24.04-arm, platform: linux/arm64, digest-suffix: linux-arm64 },
          ]
    runs-on: ${{ matrix.platforms.runner }}
    needs: [test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multi-arch Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.platforms.digest-suffix }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.platforms.digest-suffix }},mode=max
          context: .
          platforms: ${{ matrix.platforms.platform }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ github.event_name == 'pull_request' && github.event.pull_request.updated_at || github.event.head_commit.timestamp || github.event.repository.updated_at }}
            GIT_SHA=${{ github.sha }}
          outputs: |
            type=image,push-by-digest=true,name-canonical=true,push=true,annotation-index.org.opencontainers.image.description=promptfoo is a tool for testing evaluating and red-teaming LLM apps.

      - name: Export digest
        run: |
          mkdir -p "${{ runner.temp }}/digests"
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platforms.digest-suffix }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-docker-digests:
    runs-on: ubuntu-latest
    needs: [build-docker-and-push-digests]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          # shellcheck disable=SC2046,SC2091
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}"
