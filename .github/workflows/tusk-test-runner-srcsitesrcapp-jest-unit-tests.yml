name: Tusk Test Runner - srcsitesrcapp Jest unit tests

# Required for Tusk
on:
  workflow_dispatch:
    inputs:
      runId:
        description: "Tusk Run ID"
        required: true
      tuskUrl:
        description: "Tusk server URL"
        required: true
      commitSha:
        description: "Commit SHA to checkout"
        required: true

jobs:
  test-action:
    name: Tusk Test Runner
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commitSha }} # Required for Tusk to access files for the commit being tested

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Use Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: Install Dependencies
        run: npm ci

      - name: Start runner
        id: test-action
        uses: Use-Tusk/test-runner@v1
        # See https://github.com/Use-Tusk/test-runner for full details and examples.
        with:
          # Required for the test runner, do not remove this input
          runId: ${{ github.event.inputs.runId }}

          # Required for the test runner, do not remove this input
          tuskUrl: ${{ github.event.inputs.tuskUrl }}

          # Required for the test runner, do not remove this input
          commitSha: ${{ github.event.inputs.commitSha }}

          # Your Tusk auth token. It is recommended to add it to your repo's secrets.
          # Please adapt the secret name accordingly if you have named it differently.
          authToken: ${{ secrets.TUSK_AUTH_TOKEN }}

          # The directory containing your service code. If you have a monorepo containing multiple
          # services, create a separate workflow for each service with a different (and non-overlapping) appDir.
          # appDir should be relative to the root of the repo.
          # Remove this input if this doesn't apply to your repo (i.e., it is a single-service repo).
          appDir: "src,site,src/app"

          # You may specify the test framework if it is a different one
          testFramework: "Jest"

          # Test file regex to match all test files in the service
          # This is relative to the root of the repo (i.e., the appDir should be included in it, if applicable).
          testFileRegex: ''^src,site,src/app/.*.(test|spec).(js|jsx|ts|tsx)'

          # The script to run to lint the code (adapt accordingly).
          # This should be a command that fixes lint errors, not just checking for them.
          # {{file}} placeholder is required and will be replaced by Tusk with the file being linted.
          # If you don't have a lint command, you can remove this input.
          # Example (Python w/ black): "black {{file}}"
          # Example (TypeScript w/ prettier + eslint): "npx prettier --write {{file}} && npx eslint --fix {{file}}"
          # If you need to run a compilation check (e.g. tsc), contact support@usetusk.ai to ensure it is set up correctly.
          lintScript: '<your lint command for {{file}}>'

          # The script to run to test the code (adapt accordingly). Required for the test runner.
          # {{file}} placeholder is required and will be replaced by Tusk with the file being tested.
          # Example (pytest): "pytest {{file}}"
          # If your test output is known to contain a lot of console logs, we recommend suppressing these logs (e.g., use --silent / --quiet flags or equivalent).
          testScript: '<your test command for {{file}}>'

          # The runner may run tests in parallel.
          # Set this value to 1 if you know that your tests should not be run concurrently.
          # maxConcurrency: 1
'

          # The script to run to lint the code (adapt accordingly).
          # This should be a command that fixes lint errors, not just checking for them.
          # {{file}} placeholder is required and will be replaced by Tusk with the file being linted.
          # If you don't have a lint command, you can remove this input.
          # Example (Python w/ black): "black {{file}}"
          # Example (TypeScript w/ prettier + eslint): "npx prettier --write {{file}} && npx eslint --fix {{file}}"
          # If you need to run a compilation check (e.g. tsc), contact support@usetusk.ai to ensure it is set up correctly.
          <lintRecord>

          # The script to run to test the code (adapt accordingly). Required for the test runner.
          # {{file}} placeholder is required and will be replaced by Tusk with the file being tested.
          # Example (pytest): "pytest {{file}}"
          # If your test output is known to contain a lot of console logs, we recommend suppressing these logs (e.g., use --silent / --quiet flags or equivalent).
          testScript: <testScript>

          # The runner may run tests in parallel.
          # Set this value to 1 if you know that your tests should not be run concurrently.
          # maxConcurrency: 1
