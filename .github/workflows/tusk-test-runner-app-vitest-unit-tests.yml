name: Tusk Test Runner - Vitest unit tests (src/app)

# Required for Tusk
permissions:
  contents: read
on:
  workflow_dispatch:
    inputs:
      runId:
        description: 'Tusk Run ID'
        required: true
      tuskUrl:
        description: 'Tusk server URL'
        required: true
      commitSha:
        description: 'Commit SHA to checkout'
        required: true

jobs:
  test-action:
    name: Tusk Test Runner
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commitSha }} # Required for Tusk to access files for the commit being tested

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Start runner
        id: test-action
        uses: Use-Tusk/test-runner@v1
        # See https://github.com/Use-Tusk/test-runner for full details and examples.
        with:
          # Required for the test runner, do not remove this input
          runId: ${{ github.event.inputs.runId }}

          # Required for the test runner, do not remove this input
          tuskUrl: ${{ github.event.inputs.tuskUrl }}

          # Required for the test runner, do not remove this input
          commitSha: ${{ github.event.inputs.commitSha }}

          # Your Tusk auth token. It is recommended to add it to your repo's secrets.
          # Please adapt the secret name accordingly if you have named it differently.
          authToken: ${{ secrets.TUSK_AUTH_TOKEN }}

          # Vitest for the React app tests
          testFramework: 'Vitest'

          # Test file regex to match Vitest test files in src/app
          testFileRegex: '^src/app/.*\.(test|spec)\.(js|jsx|ts|tsx)$'

          # This will be the working directory for all commands
          appDir: 'src/app'

          # The script to run to lint the code for React/TypeScript files
          # Create a unique tsconfig file so we can check tsc just for the file
          lintScript: |
            set -e

            # Create a tsconfig file just for the input file
            # https://stackoverflow.com/questions/44676944/how-to-compile-a-specific-file-with-tsc-using-the-paths-compiler-option/60950355#60950355

            FILENAME=$(echo "{{file}}" | tr -cd '[:alnum:]' | tr '[:upper:]' '[:lower:]')
            TIMESTAMP=$(date +%s)
            TMP_TSCONFIG=".tsconfig-lint-${FILENAME}-${TIMESTAMP}.json"

            # Set up trap to remove temp file on exit, even if there's an error
            trap "rm -f $TMP_TSCONFIG" EXIT

            npx prettier --write {{file}}
            npx eslint --fix {{file}} --no-warn-ignored

            cat >$TMP_TSCONFIG <<EOF
            {
              "extends": "./tsconfig.json",
              "include": [
                "{{file}}",
                "**/*.d.ts"
              ]
            }
            EOF

            # Run tsc with the temp tsconfig file
            npx tsc --project $TMP_TSCONFIG --skipLibCheck --noEmit

          # The script to run Vitest tests for individual files
          testScript: 'npx vitest run {{file}}'

          # The runner may run tests in parallel.
          # Set this value to 1 if you know that your tests should not be run concurrently.
          # maxConcurrency: 1
