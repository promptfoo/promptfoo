name: Tusk Test Runner - Vitest unit tests (src/app)

# Required for Tusk
permissions:
  contents: read
on:
  workflow_dispatch:
    inputs:
      runId:
        description: 'Tusk Run ID'
        required: true
      tuskUrl:
        description: 'Tusk server URL'
        required: true
      commitSha:
        description: 'Commit SHA to checkout'
        required: true
      runnerIndexes:
        description: 'Runner indexes'
        required: false
        default: '["1"]'

jobs:
  test-action:
    name: Tusk Test Runner
    runs-on: ubuntu-latest

    strategy:
      matrix:
        runnerIndex: ${{ fromJson(github.event.inputs.runnerIndexes) }}

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commitSha }} # Required for Tusk to access files for the commit being tested

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Start runner
        id: test-action
        uses: Use-Tusk/test-runner@v1
        # See https://github.com/Use-Tusk/test-runner for full details and examples.
        with:
          # Required to use parallelization
          runnerIndex: ${{ matrix.runnerIndex }}

          # Required for the test runner, do not remove this input
          runId: ${{ github.event.inputs.runId }}

          # Required for the test runner, do not remove this input
          tuskUrl: ${{ github.event.inputs.tuskUrl }}

          # Required for the test runner, do not remove this input
          commitSha: ${{ github.event.inputs.commitSha }}

          # Your Tusk auth token. It is recommended to add it to your repo's secrets.
          # Please adapt the secret name accordingly if you have named it differently.
          authToken: ${{ secrets.TUSK_AUTH_TOKEN }}

          # Vitest for the React app tests
          testFramework: 'Vitest'

          # Test file regex to match Vitest test files in src/app
          testFileRegex: '^src/app/.*\.(test|spec)\.(js|jsx|ts|tsx)$'

          # This will be the working directory for all commands
          appDir: 'src/app'

          # The script to run to lint the code for React/TypeScript files
          lintScript: |
            set -e

            FILE_PATH="{{file}}"

            npx prettier --write $FILE_PATH
            npx eslint --fix $FILE_PATH --no-warn-ignored

            # Use incremental build to reduce latency for subsequent build checks
            # However, this means that we need to run with concurrency of 1 (on Tusk)
            npx tsc --build --noEmit --incremental

          # The script to run Vitest tests for individual files
          testScript: 'npx vitest run {{file}} --reporter=basic'

          # Max concurrency is set to 1 because we need to run tsc with incremental build
          maxConcurrency: 1
