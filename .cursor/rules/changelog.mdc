---
description: Changelog update requirements and format
globs:
  - 'CHANGELOG.md'
alwaysApply: false
---

# Changelog Guidelines

All user-facing changes must be documented in `CHANGELOG.md`. This is enforced by a GitHub Action on every pull request.

## When to Update

**IMPORTANT: ALL PRs must update the changelog. No exceptions.**

Update the changelog for EVERY pull request, including:

- New features or functionality
- Bug fixes
- Breaking changes
- API changes
- Provider additions or updates
- Configuration changes
- Performance improvements
- Deprecated features
- Dependency updates (ALL of them)
- Test changes (ALL of them)
- CI/CD changes
- Build configuration changes
- Code style/formatting changes
- Documentation updates
- Refactors and improvements

## Bypass Labels

PRs can bypass changelog requirements with one of these labels:

1. `no-changelog` - For exceptional cases (automated bot PRs, reverts of unmerged changes)
2. `dependencies` - For automated dependency updates (Dependabot, Renovate, etc.)

## Format Requirements

Follow [Keep a Changelog](https://keepachangelog.com/en/1.1.0/) format:

### Structure

```markdown
## [Unreleased]

### Added

- feat(scope): description of new feature (#1234)

### Changed

- refactor(scope): description of change (#1235)

### Fixed

- fix(scope): description of bug fix (#1236)

### Dependencies

- chore(deps): update important-package from 1.0 to 2.0 (#1237)

### Documentation

- docs(scope): description of doc change (#1238)

### Tests

- test(scope): description of test change (#1239)

### Removed

- feat(scope)!: remove deprecated feature (#1240)
```

### Entry Requirements

Each entry MUST:

1. **Include PR number**: Format `(#1234)` or placeholder `(#XXXX)`
2. **Use conventional commit prefix**: `feat:`, `fix:`, `chore:`, `docs:`, `test:`, `refactor:`
3. **Be concise**: One line per change
4. **Be user-focused**: Describe what changed and why it matters to users
5. **Include scope in parentheses**: e.g., `feat(providers):`, `fix(evaluator):`

### Categories

- **Added**: New features, capabilities, or functionality
- **Changed**: Modifications to existing functionality (refactors, improvements, chores, CI/CD)
- **Fixed**: Bug fixes and corrections
- **Dependencies**: ALL dependency updates
- **Documentation**: Documentation additions, updates, or fixes
- **Tests**: ALL test additions, updates, or improvements
- **Removed**: Removed features or functionality (usually breaking changes)

## Common Scopes

Use these common scopes for consistency:

- `providers` - Provider-related changes
- `evaluator` - Evaluation logic changes
- `webui` or `app` - Web UI changes
- `cli` - CLI-related changes
- `redteam` - Red team testing changes
- `core` - Core library changes
- `assertions` - Assertion-related changes
- `config` - Configuration changes
- `database` - Database schema or query changes

## Examples

### Good Entries

```markdown
### Added

- feat(providers): add TrueFoundry LLM Gateway provider (#5839)
- feat(redteam): add test button for request and response transforms in UI (#5482)
- feat(evaluator): add support for `defaultTest.options.provider` configuration (#5931)

### Fixed

- fix(webui): improve UI email validation handling when email is invalid (#5932)
- fix(redteam): filter out placeholders before purpose generation (#5852)
- fix(core): resolve Windows path compatibility issues (#5841)

### Changed

- chore(providers): update Alibaba model support to include latest models (#5919)
- refactor(webui): improve EvalOutputPromptDialog with grouped dependency injection (#5845)
```

### Bad Entries (Don't Do This)

```markdown
### Added

- Added new feature
- Updated provider
- Fixed bug

### Changed

- Refactored code
- Improved performance
```

**Why these are bad:**

- No PR number
- No conventional commit prefix
- No scope
- Too vague - doesn't tell users what changed
- Not user-focused

## Workflow

### Before Creating PR

1. **Add entry to CHANGELOG.md**

   ```bash
   # Edit CHANGELOG.md
   # Add entry under ## [Unreleased] in appropriate category
   ```

2. **Format entry correctly**

   ```markdown
   - feat(providers): add support for new provider XYZ (#XXXX)
   ```

3. **Commit with code changes**
   ```bash
   git add CHANGELOG.md src/providers/xyz.ts
   git commit -m "feat(providers): add support for new provider XYZ"
   ```

### After PR Number is Assigned

Update the placeholder:

```bash
# Change (#XXXX) to actual PR number (#1234)
git add CHANGELOG.md
git commit --amend --no-edit
git push --force-with-lease
```

Or add as new commit if already pushed and reviewed.

## CI Enforcement

The GitHub Action `.github/workflows/changelog-check.yml` will:

1. ✅ Pass if CHANGELOG.md is modified
2. ✅ Pass if PR has `no-changelog` label
3. ✅ Pass if PR has `dependencies` label
4. ❌ Fail otherwise

## Tips

- **Add changelog entry early** - Don't wait until CI fails
- **Be specific** - "Add Claude 4 support" > "Update provider"
- **Think like a user** - What will they notice or care about?
- **Use active voice** - "Add X" not "X was added"
- **Include context** - What problem does this solve?
- **Don't repeat PR title** - Changelog can be more detailed than title
- **Group related changes** - Multiple bullets in same category if needed

## When Unsure

- **Not sure which category?** → Use "Changed"
- **Not sure about scope?** → Use the most specific relevant scope
- **Dependency update?** → ALL dependencies go in "Dependencies" category
- **Test change?** → ALL tests go in "Tests" category
- **Multiple related changes?** → One entry per logical change, multiple bullets OK

## References

- Keep a Changelog: https://keepachangelog.com/en/1.1.0/
- Conventional Commits: https://www.conventionalcommits.org/
- See `CLAUDE.md` for full documentation
- See `site/docs/contributing.md` for contributor guidelines
